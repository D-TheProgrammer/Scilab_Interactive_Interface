//Configuration de la fenêtre
global f;
global handles;
handles = struct();

f = figure('figure_position', [496, 145], 'figure_size', [1200, 800], 'auto_resize', 'on', 'resize', 'off', ...
    'background', [34], 'figure_name', 'Figure n°%d', 'dockable', 'off', 'infobar_visible', 'off', ...
    'toolbar_visible', 'off', 'menubar_visible', 'off', 'default_axes', 'on', 'visible', 'off');


f.visible = "on";
global chemin_dossier_menu;


// ON DOIT DABORD RECCUPERER LE CHEMIN VERS LE DOSSIER CONTENANT TOUTES LES IMAGES POUR LE MENU
// CAR SCILAB EST LIMITE ET ACCEPTE PAS LES CHMEIN RELATIF

global chemin_dossier_menu_edit;

//Texte indiquant à l'utilisateur d'entrer le chemin du dossier 'image_menu'
texte_chemin_doss_menu= uicontrol(f,'unit', 'normalized', ...
      "Style", "text", ...
      "Position", [0.2, 0.8, 0.6, 0.05], ... 
      "BackgroundColor", [1, 1, 1], ...
      "foreground", [1,0,0],...
      'FontWeight', 'bold', ...
      "FontSize", 15, ...
      "String", "ENTREZ LE CHEMIN JUSQU AU DOSSIER || image_menu ||",...
      'Visible', 'on');

//Edit pour entrer le chemin du dossier
chemin_dossier_menu_edit = uicontrol(f,'unit', 'normalized', ...
     "Style", "edit", ...
     "Position", [0.2, 0.75, 0.6, 0.05], ... 
     "FontSize", 12, ...
     "BackgroundColor", [1, 1, 1], ...
     "String", "", ... 
     "Callback", 'enr_chemin_dossier_menu',...
     'Visible', 'on');

//bouton "Enregistrer" pour valider et activer la fonction menu_home_callback
enregistrer_chemin_menu=  uicontrol(f, 'unit', 'normalized', ...
      "Style", "pushbutton", ...
      "Position", [0.2, 0.7, 0.2, 0.05], ... 
      "FontSize", 12, ...
      "BackgroundColor", [0.5, 0.5, 0.5], ... 
      "String", "Enregistrer", ...
      "Callback", 'enregistrer_et_activer_callback',...
      'Visible', 'on'); 

//Fonction pour récupérer le chemin entré dans le champ edit
function enr_chemin_dossier_menu()
    global chemin_dossier_menu;
    chemin_dossier_menu = get(chemin_dossier_menu_edit, 'String');
    
    //affichage du chemin
    disp("Chemin du dossier || images_menu || : " + chemin_dossier_menu);
endfunction

//Fonction du bouton "Enregistrer" pour enregistrer le chemin et activer la fonction menu_home_callback
function enregistrer_et_activer_callback(handles)
    // Sauvegarder le chemin d'abord
    enr_chemin_dossier_menu();
    
    //appel du menu home
    menu_home_callback();
endfunction


//-------------------------------------------------------------------------------//

function menu_home_callback(handles)
    global chemin_dossier_menu;
    global global chemin_dossier_menu;

    delete("all");
    //Boutons Commencer et Quitter
    handles.btn_commencer = uicontrol(f, 'unit', 'normalized', ...
        'ForegroundColor', [0, 0.7, 0], ...
        'FontSize', 26, ...
        'FontWeight', 'bold', ...
        'String', 'COMMENCER', ...
        'Position', [0.35, 0.17, 0.3, 0.1], ...
        'Callback', 'btn_menu1_callback(handles)', ...
        'Tag', 'btn_commencer', ...
        'Visible', 'on');
    
    handles.btn_quitter = uicontrol(f, 'unit', 'normalized', ...
        'ForegroundColor', [1, 0, 0], ...
        'FontSize', 26, ...
        'FontWeight', 'bold', ...
        'String', 'QUITTER', ...
        'Position', [0.35, 0.04, 0.3, 0.1], ...
        'Callback', 'btn_quitter_callback()', ...
        'Tag', 'btn_quitter', ...
        'Visible', 'on');
    
    //-------------------------------------------------------------------------------//
    
    //Initialisation de l'axe d'affichage pour les images
    handles.axes = newaxes();
    handles.axes.margins = [0, 0, 0, 0];
    handles.axes.axes_bounds = [0, 0.0, 1, 1];
    handles.axes.auto_clear = 'on';
    
    f.visible = "on";
    
    chemin_img_menu= chemin_dossier_menu + filesep() + "menu_traitement_image1.png"; 
    
    img_menuHome =imread(chemin_img_menu);
    imshow(img_menuHome);
endfunction


//-------------------------------------------------------------------------------//


function btn_aide_callback(handles)
    global f;
    delete("all");

    //Texte d'aide en HTML avec mise en forme
    texte_aide = "<html>" + ...
        "<h2 style=font-size:16px;>Guide d Utilisation</h2>" + ...
        "<p>Bienvenue sur mon application de traitement d image interactif,<br> " + ...
        "grâce aux différents boutons et flèches, vous pouvez naviguer entre les différents traitements disponibles.<br> " + ...
        "Dans ce menu d aide, vous allez pouvoir consulter une description des fonctions disponibles ainsi que la manière de les utiliser.</p><br>" + ...
        "<p><b><span style=color:red;>1. Afficher Image</span></b> (<b>Permet d afficher une image sélectionnée</b>).<br>" + ...
        "<i><span style=color:blue;>Comment utiliser la fonction de traitement</span></i><br>" + ...
        "   - Choisir une image.<br>" + ...
        "   - Cliquez sur Montrer Image.</p>" + ...
        "<p><b><span style=color:red;>2. Agrandir Image</span></b> (<b>Permet de redimensionner une image en modifiant son échelle</b>).<br>" + ...
        "<i><span style=color:blue;>Comment utiliser la fonction de traitement</span></i><br>" + ...
        "   - Choisir une image.<br>" + ...
        "   - Ajuster la valeur dans le champ (haut/bas).<br>" + ...
        "   - Cliquez sur Agrandir Image.</p>" + ...
        "<p><b><span style=color:red;>3. Histogramme</span></b> (<b>Génère et affiche l histogramme d une image</b>).<br>" + ...
        "<i><span style=color:blue;>Comment utiliser la fonction de traitement</span></i><br>" + ...
        "   - Affiche l histogramme de l image.<br>" + ...
        "   - Produit également un histogramme égalisé et l image égalisée.<br>" + ...
        "   - Cliquez sur Lancer pour appliquer<br>" + ...
        "   - Attendez que le traitement se fasse tant que le message ||Traitement en cours || est affiché veuillez ne pas relancer .</p>" + ...
        "<p><b><span style=color:red;>4. Seuillage</span></b> (<b>Applique un seuil sur les pixels d une image</b>).<br>" + ...
        "<i><span style=color:blue;>Comment utiliser la fonction de traitement</span></i><br>" + ...
        "   - Choisir une image.<br>" + ...
        "   - Régler le seuil avec le slider.<br>" + ...
        "   - Cliquez sur Seuillage Image.</p>" + ...
        "   - Attendez que le traitement se fasse tant que le message ||Traitement en cours || est affiché veuillez ne pas relancer .</p>" + ...
        "<p><b><span style=color:red;>5. Multiplication Image</span></b> (<b>Multiplie les valeurs des pixels d une image par un facteur donné</b>).<br>" + ...
        "<i><span style=color:blue;>Comment utiliser la fonction de traitement</span></i><br>" + ...
        "   - Choisir une image.<br>" + ...
        "   - Régler la valeur de multiplication avec le slider.<br>" + ...
        "   - L image est multipliée AUTOMATIQUEMENT EN TEMPS REEL en fonction du slider.</p>" + ...
        "<p><b><span style=color:red;>6. 7. Additionner/Soustraire Image</span></b> (<b>Effectue une addition ou une soustraction entre deux images</b>).<br>" + ...
        "<i><span style=color:blue;>Comment utiliser la fonction de traitement</span></i><br>" + ...
        "   - Sélectionner deux images.<br>" + ...
        "   - Cliquez sur Lancer pour appliquer l opération choisie.</p>" + ...
        "<p><b><span style=color:red;>8. Rotation Image</span></b> (<b>Permet de faire pivoter une image d un certain angle</b>).<br>" + ...
        "<i><span style=color:blue;>Comment utiliser la fonction de traitement</span></i><br>" + ...
        "   - Choisir une image.<br>" + ...
        "   - Ajuster l angle avec le slider.<br>" + ...
        "   - Cliquez sur Rotation Image.</p>" + ...
        "   - Attendez que le traitement se fasse tant que le message ||Traitement en cours || est affiché veuillez ne pas relancer .</p>" + ...
        "<p><b><span style=color:red;>9. Inverser Couleurs</span></b> (<b>Inverse les couleurs d une image</b>).<br>" + ...
        "<i><span style=color:blue;>Comment utiliser la fonction de traitement</span></i><br>" + ...
        "   - Inverse les couleurs de l image choisie après clic.</p>" + ...
        "<p><b><span style=color:red;>10. Symétrie Image</span></b> (<b>Applique une symétrie horizontale, verticale, ou autre à une image</b>).<br>" + ...
        "<i><span style=color:blue;>Comment utiliser la fonction de traitement</span></i><br>" + ...
        "   - Choisir une image.<br>" + ...
        "   - Sélectionner une méthode de symétrie (menu déroulant).<br>" + ...
        "   - Cliquez sur Symétrie Image.</p>" + ...
        "<p><b><span style=color:red;>11. Filtre Passe-Bas</span></b> (<b>Applique un filtre passe-bas pour lisser l image</b>).<br>" + ...
        "<i><span style=color:blue;>Comment utiliser la fonction de traitement</span></i><br>" + ...
        "   - Choisir une image.<br>" + ...
        "   - Sélectionner une méthode de filtre (menu déroulant).<br>" + ...
         "<ul>" + ...
        "   <li><b>Bruit Gaussien :</b> Ajoute un bruit aléatoire à l image .</li>" + ...
        "   <li><b>Bruit Sel & Poivre :</b> Ajoute des pixels noirs et blancs aléatoires à l image</li>" + ...
        "   <li><b>Filtre Moyenneur :</b> Applique une moyenne locale sur une région de 3x3 pixels réduisant le bruit de haute fréquence.</li>" + ...
        "   <li><b>Filtre Médian :</b> Remplace chaque pixel par la valeur médiane de son voisinage</li>" + ...
        "   <li><b>Filtre Gaussien :</b> Applique une convolution avec une matrice gaussienne pour lisser l image</li>" + ...
        "</ul>"+ ...
        "   - Cliquez sur Lancer pour appliquer un filtre passe-bas à l image.</p>" + ...
        "<p><b><span style=color:red;>12. Filtre Passe-Haut</span></b> (<b>Applique un filtre passe-haut pour accentuer les détails de l image</b>).<br>" + ...
        "<i><span style=color:blue;>Comment utiliser la fonction de traitement</span></i><br>" + ...
        "   - Choisir une image.<br>" + ...
        "   - Sélectionner une méthode de filtre (menu déroulant).<br>" + ...
         "<ul>" + ...
        "   <li><b>Filtre Laplacien-4 :</b> Met en évidence les contours grace a  Laplacien avec 4 voisins.</li>" + ...
        "   <li><b>Filtre Laplacien-8 :</b> Accentue les contours avec un opérateur Laplacien prenant 8 voisins.</li>" + ...
        "   <li><b>Filtre Sobel Vertical :</b> Détecte les contours verticaux dans l image.</li>" + ...
        "   <li><b>Filtre Sobel Horizontal :</b> Met en évidence les contours horizontaux.</li>" + ...
        "   <li><b>Module du Gradient Sobel :</b> Combine les résultats des filtres Sobel pour détecter les contours dans toutes les directions.</li>" + ...
        "</ul>" + ...
        "   - Cliquez sur Lancer pour appliquer un filtre passe-haut à l image.</p>" + ...
        "<p><b><span style=color:red;>12. Filtre Couleur Personnalisé</span></b> " + ...
        "(<b>Applique des modifications aux canaux de couleur rouge, vert et bleu</b>).<br>" + ...
        "<i><span style=color:blue;>Comment utiliser la fonction de traitement</span></i><br>" + ...
        "   - Choisir une image.<br>" + ...
        "   - Sélectionner un type de filtre (menu déroulant).<br>" + ...
        "   - Cochez les cases Rouge, Vert ou Bleu pour spécifier les canaux.<br>" + ...
        "   - L effet est alors appliqué AUTOMATIQUEMENT EN TEMPS REEL.</p>" + ...
        "<p>Les options disponibles incluent :</p>" + ...
        "<ul>" + ...
        "   <li><b>Filtre Couleur Monochrome :</b> Désactive les autres canaux pour conserver une seule couleur.</li>" + ...
        "   <li><b>Filtre Teinte Couleur :</b> Remplace un canal par la couleur maximale.</li>" + ...
        "   <li><b>Filtre Amplification :</b> Multiplie l intensité d un canal (limité à 255).</li>" + ...
        "   <li><b>Filtre Suppression :</b> Éteint totalement un ou plusieurs canaux.</li>" + ...
        "   <li><b>Filtre Normalisation :</b> Redistribue les couleurs activées de façon proportionnelle.</li>" + ...
        "</ul>" + ...
        "</html>";

    //Ajoute le texte d'aide dans la figure
    uicontrol(f, 'Style', 'text', ...
              'String', texte_aide, ...
              'HorizontalAlignment', 'left', ...
              'Units', 'normalized', ...
              'Position', [0, 0, 1, 1], ...
              'BackgroundColor', [1, 1, 1], ...
              'FontSize', 14);  
             
     handles.btn_retour= uicontrol(f, 'unit', 'normalized', ...
              'Style', 'pushbutton', ...
              'String', 'Retour', ...
              'Position', [0.80, 0.95, 0.1, 0.05], ...
              'FontSize', 18, ...
              'Background', [0.5,0.5,0.5], ...
              'ForegroundColor', [236/255, 209/255, 19/255], ...
              'Callback', 'btn_menu1_callback(handles)');  // Appelle la fonction 'menu' lorsque cliqué

    // Bouton Retour en bas
   handles.btn_retour2= uicontrol(f, 'unit', 'normalized', ... 
              'Style', 'pushbutton', ...
              'String', 'Retour', ...
              'Position', [0.80, 0.05, 0.1, 0.05], ...
              'FontSize', 18, ...
              'Background', [0.5,0.5,0.5], ...
              'ForegroundColor', [236/255, 209/255, 19/255], ...
              'Callback',  'btn_menu1_callback(handles)');
endfunction


function fn_bout_aide(f)
    //Création du bouton aide
    handles.btn_aide = uicontrol(f, 'unit', 'normalized', ...
        'String', "Aide ?", ...
        'FontWeight', 'bold', ...
        'Position', [0.90, 0.80, 0.08, 0.05], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_aide_callback()', ...
        'Visible', 'on', ...
        'Background', [134/255,118/255,181/255], ...
        'FontSize', 18, ...
        'ForegroundColor', [236/255, 209/255, 19/255], ...
        'HorizontalAlignment', 'center');
endfunction



//-------------------------------------------------------------------------------//
global handles axe_image1 axis_image2;
    
//Fonction pour afficher le fond de l'interface
function afficher_background_image(image_path)
    axes_background = newaxes();
    axes_background.margins = [0, 0, 0, 0];
    axes_background.axes_bounds = [0, 0, 1, 1];
    axes_background.auto_clear = 'on';
    img_menu = imread(image_path);
    imshow(img_menu);
endfunction

//-------------------------------------------------------------------------------//

//Boutons à afficher après "Commencer" 
function btn_menu1_callback(handles)
    global f;
    global chemin_dossier_menu;
    delete("all"); //Supprimer tous les éléments graphiques de lancienne page
    chemin_img_menu= chemin_dossier_menu + filesep() + "menu_traitement_image2.png"; 
     
    afficher_background_image(chemin_img_menu); 
    
    texte = "<html>Afficher<br>"+"Image";   
    handles.btn_afficher_image = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.12, 0.01, 0.12, 0.1], ...
        'Callback', 'btn_afficher_image_callback(handles)', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');

    texte = "<html>Agrandir<br>"+"Image"; 
    handles.btn_agrandir_image = uicontrol(f, 'unit', 'normalized', ...
        'String',texte, ...
        'Position', [0.26, 0.01, 0.12, 0.1], ...
        'Callback', 'btn_agrandir_image_callback(handles)', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');

    texte = "<html>Histogramme<br>"+"Image"; 
    handles.btn_histogramme = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position',[0.40, 0.01, 0.12, 0.1], ...
        'Callback', 'btn_histogramme_callback(handles)', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');

    texte = "<html>Seuillage<br>"+"Image"; 
    handles.btn_seuillage = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.54, 0.01, 0.12, 0.1], ...
        'Callback', 'btn_seuillage_callback(handles)', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');

    texte = "<html>Multiplication<br>"+"Image"; 
    handles.btn_multiplication_image = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.68, 0.01, 0.12, 0.1], ...
        'Callback', 'btn_multiplication_image_callback(handles)', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');

    
    // Nouveau bouton "<-" pour retourner à btn_menu3_callback
    handles.btn_back = uicontrol(f, 'unit', 'normalized', ...
        'String', "<-", ...
        'Position', [0.05, 0.01, 0.06, 0.11], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_menu3_callback(handles)', ...
        'Visible', 'on', ...
        'Background', [28/255, 54/255, 84/255], ...
        'FontSize', 30, ...
        'ForegroundColor', [1, 1, 1], ...
        'HorizontalAlignment', 'center');

        
    //bouton "->" pour le menu supplémentaire
    handles.btn_next = uicontrol(f, 'unit', 'normalized', ...
        'String', '->', ...
        'Position', [0.85, 0.01, 0.06, 0.1], ...
        'Callback', 'btn_menu2_callback(handles)', ...
        'Visible', 'on',...
        'Background' , [28/255, 54/255, 84/255], ...
        'FontSize', 30,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');
    
    fn_bout_aide(f);
endfunction

//Bouton pour Quitter
function btn_quitter_callback()
    close(f);
endfunction



//-------------------------------------------------------------------------------//
//---------------------------- !!! MENU 1 !!!------------------------------------//
//-------------------------------------------------------------------------------//

//Bouton qui sera appeler pour le menu traitement ' Afficher Image'
function btn_afficher_image_callback(handles)
    global f;
    global chemin_dossier_menu;
    delete("all"); //Supprimer tous les éléments graphiques de lancienne page

     chemin_img_menu= chemin_dossier_menu + filesep() + "menu_traitement_image4.png"; 
     
    afficher_background_image(chemin_img_menu); 
    
    // Boutons specifiques à Afficher Image
    texte = "<html>Choisir<br>"+"Image"; 
    handles.btn_choisir_image = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.05, 0.01, 0.15, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_choisir_image_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');
    
    texte = "<html>Montrer<br>"+"Image"; 
    handles.btn_lancer_afficher_image = uicontrol(f, 'unit', 'normalized', ...
    'String', texte, ...
        'Position', [0.22, 0.01, 0.15, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_lancer_afficher_image_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[0, 0.9 ,0],...
        'HorizontalAlignment', 'center');
    
    texte = "<html>Agrandir<br>"+"Image"; 
    handles.btn_agrandir_image = uicontrol(f, 'unit', 'normalized', ...
        'String',texte, ...
        'Position', [0.50, 0.01, 0.1, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_agrandir_image_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');
    
 
    texte = "<html>Histogramme<br>"+"Image"; 
    handles.btn_histogramme = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.61, 0.01, 0.1, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_histogramme_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');
    
    texte = "<html>Seuillage<br>"+"Image"; 
    handles.btn_seuillage = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.72, 0.01, 0.1, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_seuillage_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');
    


    texte = "<html>Multiplication<br>"+"Image"; 
    handles.btn_multiplication_image = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.83, 0.01, 0.1, 0.11], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_multiplication_image_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');
    
    //bouton "<-" pour retourner à btn_menu3_callback
    handles.btn_back = uicontrol(f, 'unit', 'normalized', ...
        'String', "<-", ...
        'Position', [0.44, 0.01, 0.06, 0.11], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_menu3_callback(handles)', ...
        'Visible', 'on', ...
        'Background', [28/255, 54/255, 84/255], ...
        'FontSize', 30, ...
        'ForegroundColor', [1, 1, 1], ...
        'HorizontalAlignment', 'center');
    
    //bouton "->" pour aller à btn_menu2_callback
    handles.btn_next = uicontrol(f, 'unit', 'normalized', ...
        'String', '->', ...
        'Position', [0.94, 0.01, 0.06, 0.11], ...
        'Callback', 'btn_menu2_callback(handles)', ...
        'Visible', 'on',...
        'Background' , [28/255,54/255,84/255],...
        'FontSize', 30,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');
    
    fn_bout_aide(f);
endfunction


//-------------------------------------------------------------------------------//


//Bouton qui sera appeler pour le menu traitement ' Agrandir Image'
global valeur_agrandissement;

function btn_agrandir_image_callback(handles)
    global f;
    global chemin_dossier_menu;
    global handles;
    delete("all");
    
    // Initialisation de valeur_agrandissement pour eviter le probleme de tampon
    valeur_agrandissement = 0;
    
     chemin_img_menu= chemin_dossier_menu + filesep() + "menu_traitement_image2.png"; 
     
    afficher_background_image(chemin_img_menu); 
    
    // Boutons specifiques à Agrandir Image
    texte = "<html>Choisir<br>"+"Image"; 
    handles.btn_choisir_image = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.05, 0.01, 0.15, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_choisir_image_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');
    
    texte = "<html>Lancer<br>"+"Agrandir<br>"+"Image"; 
    handles.btn_lancer_agrandir_image = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.22, 0.01, 0.15, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_lancer_agrandir_image_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[0, 0.9 ,0],..
        'HorizontalAlignment', 'center');
    
    texte = "<html>Afficher<br>"+"Image";   
    handles.btn_afficher_image = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.50, 0.01, 0.1, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_afficher_image_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');
    
    
    texte = "<html>Histogramme<br>"+"Image"; 
    handles.btn_histogramme = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.61, 0.01, 0.1, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_histogramme_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');
    
    texte = "<html>Seuillage<br>"+"Image"; 
    handles.btn_seuillage = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.72, 0.01, 0.1, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_seuillage_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');
    
    texte = "<html>Multiplication<br>"+"Image"; 
    handles.btn_multiplication_image = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.83, 0.01, 0.1, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_multiplication_image_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');
    
    handles.btn_back = uicontrol(f, 'unit', 'normalized', ...
        'String', "<-", ...
        'Position', [0.44, 0.01, 0.06, 0.11], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_menu3_callback(handles)', ...
        'Visible', 'on', ...
        'Background', [28/255, 54/255, 84/255], ...
        'FontSize', 30, ...
        'ForegroundColor', [1, 1, 1], ...
        'HorizontalAlignment', 'center');

    handles.btn_next = uicontrol(f, 'unit', 'normalized', ...
        'String', '->', ...
        'Position', [0.94, 0.01, 0.06, 0.11], ...
        'Callback', 'btn_menu2_callback(handles)', ...
        'Visible', 'on',...
        'Background' , [28/255,54/255,84/255],...
        'FontSize', 30,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');
        
        
     handles.spinner_agrandissement = uicontrol(f, ...
        'unit', 'normalized', ...
        'BackgroundColor', [0.8, 0.8, 0.8], ... 
        'Enable', 'on', ...
        'FontName', 'Tahoma', ...
        'FontSize', 12, ...
        'ForegroundColor', [0, 0, 0], ...
        'HorizontalAlignment', 'left', ...
        'Max', 15, ...
        'Min', 1, ...
        'Position', [0.26, 0.17, 0.05, 0.05], ...
        'Relief', 'default', ...
        'SliderStep', [1, 1], ... // pas de 1
        'Style', 'spinner', ...
        'Value', 0, ...
        'Tag', 'spinner_aggrandissement', ...
        'Callback', 'spinner_agrandissement_callback(handles);');

    //Pour Affichage de la valeur actuelle du slider dans le champ texte 
    handles.spinner_agrandissement_value_text = uicontrol(f, ...
        'Style', 'text', ...
        'unit', 'normalized', ...
        'FontSize', 13, ...
        'FontWeight', 'bold', ...
        'Position', [0.32, 0.17, 0.05, 0.05], ... 
        'Background', [108/255 , 146/255, 204/255], ..
        'String', '0', ... 
        'ForegroundColor', [1, 0, 0]); // Texte en rouge


    //Texte au-dessus du slider pour indiquer les instructions
    handles.spinner_agrandissement_instruction_text = uicontrol(f, ...
        'Style', 'text', ...
        'unit', 'normalized', ...
        'FontSize', 14, ...
        'FontWeight', 'bold', ...
        'ForegroundColor', [0.7, 0, 0.7], ... 
        'Background', [98/255 , 152/255, 209/255], ...
        'Position', [0.105, 0.23, 0.222, 0.05], ... 
        'String', 'Choisissez le niveau dagrandissement');
       
    fn_bout_aide(f); 
endfunction

// fonction qui permet de reccuperer la valeur du spinner
function spinner_agrandissement_callback(handles)
    global handles;
    global valeur_agrandissement;
    valeur_agrandissement = get(handles.spinner_agrandissement, 'Value'); //Récupérer la valeur du slider
    set(handles.spinner_agrandissement_value_text, 'String', msprintf("%d", valeur_agrandissement)); //Pour mettre à jour le champ texte
endfunction


//-------------------------------------------------------------------------------//

//Bouton qui sera appeler pour le menu traitement ' Histogramme Image'

function btn_histogramme_callback(handles)
    global f;
    global chemin_dossier_menu;
    delete("all"); //Supprimer tous les éléments graphiques de lancienne page

     chemin_img_menu= chemin_dossier_menu + filesep() + "menu_traitement_image5.png"; 
     
    afficher_background_image(chemin_img_menu); 
    
    // Boutons specifiques 
    texte = "<html>Choisir<br>"+"Image"; 
    handles.btn_choisir_image = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.05, 0.01, 0.15, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_choisir_image_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');
        
    texte = "<html>Lancer<br>"+"Histogramme"; 
    handles.btn_lancer_histogramme = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.22, 0.01, 0.15, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_lancer_histogramme_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[0, 0.9 ,0],..
        'HorizontalAlignment', 'center');
    
    texte = "<html>Afficher<br>"+"Image";   
    handles.btn_afficher_image = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.50, 0.01, 0.1, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_afficher_image_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');
    
    texte = "<html>Agrandir<br>"+"Image"; 
    handles.btn_agrandir_image = uicontrol(f, 'unit', 'normalized', ...
        'String',texte, ...
        'Position', [0.61, 0.01, 0.1, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_agrandir_image_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');
    
    texte = "<html>Seuillage<br>"+"Image"; 
    handles.btn_seuillage = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.72, 0.01, 0.1, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_seuillage_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');
    
    texte = "<html>Multiplication<br>"+"Image"; 
    handles.btn_multiplication_image = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.83, 0.01, 0.1, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_multiplication_image_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');
    
    handles.btn_back = uicontrol(f, 'unit', 'normalized', ...
        'String', "<-", ...
        'Position', [0.44, 0.01, 0.06, 0.10], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_menu3_callback(handles)', ...
        'Visible', 'on', ...
        'Background', [28/255, 54/255, 84/255], ...
        'FontSize', 30, ...
        'ForegroundColor', [1, 1, 1], ...
        'HorizontalAlignment', 'center');

    handles.btn_next = uicontrol(f, 'unit', 'normalized', ...
        'String', '->', ...
        'Position', [0.94, 0.01, 0.06, 0.10], ...
        'Callback', 'btn_menu2_callback(handles)', ...
        'Visible', 'on',...
        'Background' , [28/255,54/255,84/255],...
        'FontSize', 30,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');
        
    fn_bout_aide(f);
endfunction


//-------------------------------------------------------------------------------//

//Bouton qui sera appeler pour le menu traitement ' Seuillage Image'

global valeur_seuil;
function btn_seuillage_callback(handles)
    global f;
    global handles;
    global chemin_dossier_menu;
    delete("all");
    
    //Initialisation de valeur_seuil pour eviter le problème de tampon
    valeur_seuil = 0;
    
    chemin_img_menu= chemin_dossier_menu + filesep() + "menu_traitement_image2.png"; 
     
    afficher_background_image(chemin_img_menu); 
    
    //Boutons specifiques 
    texte = "<html>Choisir<br>"+"Image"; 
    handles.btn_choisir_image = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.05, 0.01, 0.15, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_choisir_image_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');
    
    texte = "<html>Lancer<br>"+"Seuillage"; 
    handles.btn_lancer_seuillage = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.22, 0.01, 0.15, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_lancer_seuillage_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[0, 0.9 ,0],..
        'HorizontalAlignment', 'center');
    
    texte = "<html>Afficher<br>"+"Image";   
    handles.btn_afficher_image = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.50, 0.01, 0.1, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_afficher_image_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');
    
    texte = "<html>Agrandir<br>"+"Image"; 
    handles.btn_agrandir_image = uicontrol(f, 'unit', 'normalized', ...
        'String',texte, ...
        'Position', [0.61, 0.01, 0.1, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_agrandir_image_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');
    
    texte = "<html>Histogramme<br>"+"Image"; 
    handles.btn_histogramme = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.72, 0.01, 0.1, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_histogramme_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');
    
    texte = "<html>Multiplication<br>"+"Image"; 
    handles.btn_multiplication_image = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.83, 0.01, 0.1, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_multiplication_image_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');
        
     handles.btn_back = uicontrol(f, 'unit', 'normalized', ...
        'String', "<-", ...
        'Position', [0.44, 0.01, 0.06, 0.11], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_menu3_callback(handles)', ...
        'Visible', 'on', ...
        'Background', [28/255, 54/255, 84/255], ...
        'FontSize', 30, ...
        'ForegroundColor', [1, 1, 1], ...
        'HorizontalAlignment', 'center');

    handles.btn_next = uicontrol(f, 'unit', 'normalized', ...
        'String', '->', ...
        'Position', [0.94, 0.01, 0.06, 0.11], ...
        'Callback', 'btn_menu2_callback(handles)', ...
        'Visible', 'on',...
        'Background' , [28/255,54/255,84/255],...
        'FontSize', 30,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');
        
    handles.slider_seuillage = uicontrol(f, ...
        'unit', 'normalized', ...
        'BackgroundColor', [0.8, 0.8, 0.8], ... //couleur d'arriere-plan
        'Enable', 'on', ...
        'FontName', 'Tahoma', ...
        'FontSize', 12, ...
        'ForegroundColor', [0, 0, 0], ...
        'HorizontalAlignment', 'left', ...
        'Max', 255, ...
        'Min', 0, ...
        'Position', [0.11, 0.17, 0.2, 0.05], ...
        'Relief', 'default', ...
        'SliderStep', [10/255, 10/255], ... // pas de 10
        'Style', 'slider', ...
        'Value', 0, ...
        'Tag', 'slider_seuillage', ...
        'Callback', 'slider_seuillage_callback(handles);');

    //Pour Affichage de la valeur actuelle du slider dans le champ texte 
    handles.slider_value_text = uicontrol(f, ...
        'Style', 'text', ...
        'unit', 'normalized', ...
        'FontSize', 12, ...
        'FontWeight', 'bold', ...
        'Background', [108/255 , 146/255, 204/255], ...
        'Position', [0.32, 0.17, 0.03, 0.05], ... 
        'String', '0', ... 
        'ForegroundColor', [1, 0, 0]); //Texte en rouge


    //Texte au-dessus du slider pour indiquer les instructions
    handles.slider_instruction_text = uicontrol(f, ...
        'Style', 'text', ...
        'unit', 'normalized', ...
        'FontSize', 14, ...
        'FontWeight', 'bold', ...
        'ForegroundColor', [1, 0, 0], ... 
        'Position', [0.105, 0.23, 0.222, 0.05], ...  
        'ForegroundColor', [0.7, 0, 0.7], ... 
        'Background', [98/255 , 152/255, 209/255], ...
        'String', 'Choisissez le seuil pour le traitement');
    
    fn_bout_aide(f);     
endfunction

// fonction qui permet de reccuperer la valeur du spinner
function slider_seuillage_callback(handles)
    global handles;
    global valeur_seuil;
    valeur_seuil = get(handles.slider_seuillage, 'Value'); // Recuperer la valeur du slider
    set(handles.slider_value_text, 'String', msprintf("%d", valeur_seuil)); //Pour mettre à jour le champ texte
endfunction


//-------------------------------------------------------------------------------//

//Bouton qui sera appeler pour le menu traitement 

global valeur_multiplication;
function btn_multiplication_image_callback(handles)
    global f; 
    global handles;
    global chemin_dossier_menu;
    
    global valeur_multiplication;
    delete("all");
    
    chemin_img_menu= chemin_dossier_menu + filesep() + "menu_traitement_image2.png"; 
     
    afficher_background_image(chemin_img_menu);

    //Cree les boutons spécifiques
    texte = "<html>Choisir<br>"+"Image"; 
    handles.btn_choisir_image = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.05, 0.01, 0.15, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_choisir_image_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');

    texte = "<html>Afficher<br>"+"Image";   
    handles.btn_afficher_image = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.50, 0.01, 0.1, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_afficher_image_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');

    texte = "<html>Agrandir<br>"+"Image"; 
    handles.btn_agrandir_image = uicontrol(f, 'unit', 'normalized', ...
        'String',texte, ...
        'Position', [0.61, 0.01, 0.1, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_agrandir_image_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');

    texte = "<html>Histogramme<br>"+"Image"; 
    handles.btn_histogramme = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.72, 0.01, 0.1, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_histogramme_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');

    texte = "<html>Seuillage<br>"+"Image"; 
    handles.btn_seuillage = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.83, 0.01, 0.1, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_seuillage_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');
     
    handles.btn_back = uicontrol(f, 'unit', 'normalized', ...
        'String', "<-", ...
        'Position', [0.44, 0.01, 0.06, 0.11], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_menu3_callback(handles)', ...
        'Visible', 'on', ...
        'Background', [28/255, 54/255, 84/255], ...
        'FontSize', 30, ...
        'ForegroundColor', [1, 1, 1], ...
        'HorizontalAlignment', 'center');

    handles.btn_next = uicontrol(f, 'unit', 'normalized', ...
        'String', '->', ...
        'Position', [0.94, 0.01, 0.06, 0.11], ...
        'Callback', 'btn_menu2_callback(handles)', ...
        'Visible', 'on',...
        'Background' , [28/255,54/255,84/255],...
        'FontSize', 30,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');

      
   handles.slider_multiplication = uicontrol(f, ...
        'unit', 'normalized', ...
        'BackgroundColor', [0.8, 0.8, 0.8], ... //couleur d'arriere-plan
        'Enable', 'on', ...
        'FontName', 'Tahoma', ...
        'FontSize', 12, ...
        'ForegroundColor', [0, 0, 0], ...
        'HorizontalAlignment', 'left', ...
        'Max', 5, ...
        'Min', 0, ...
        'Position', [0.11, 0.17, 0.2, 0.05], ...
        'Relief', 'default', ...
        'SliderStep', [1/5, 1/5], ... // pas de 10
        'Style', 'slider', ...
        'Value', 1, ...
        'Tag', 'slider_multiplication', ...
        'Callback', 'slider_multiplication_callback(handles);');       
        
    //Pour afficher la valeur actuelle fasn le slider
    handles.slider_multi_value_text = uicontrol(f, ...
        'Style', 'text', ...
        'unit', 'normalized', ...
        'FontSize', 12, ...
        'FontWeight', 'bold', ...
        'Position', [0.32, 0.17, 0.07, 0.05], ... 
        'String', '0', ... 
        'Background', [108/255 , 146/255, 204/255], ...
        'ForegroundColor', [1, 0, 0]); 

    // Texte instruction
    handles.slider_multi_instruction_text = uicontrol(f, ...
        'Style', 'text', ...
        'unit', 'normalized', ...
        'FontSize', 14, ...
        'FontWeight', 'bold', ...
        'Position', [0.105, 0.23, 0.222, 0.05], ... 
        'ForegroundColor', [0, 0.6, 0], ... 
        'Background', [98/255 , 152/255, 209/255], ...
        'String', '<html>Pour Lancer le traitement <br>choisissez la valeur de multiplication');

    fn_bout_aide(f);
endfunction

global dernier_rafraichissement;
dernier_rafraichissement = 0; //Pour savoir quand une image a ete cree pour la derrniere fois
tic(); //Demarre le chronometre pour `toc`

//Fonction qui avec le slider demarre le traitement
function slider_multiplication_callback(handles)
    global handles;
    global valeur_multiplication;
    global chemin_complet;
    global dernier_rafraichissement;
    global img_sortie;

    temps_actuel = toc(); // Temps écoulé depuis le dernier `tic`

    //On test si un delai min a ete fait 
    if (temps_actuel - dernier_rafraichissement < 0.5) then
        return; //si pas assez de temps on actualise pas donc return
    end

    dernier_rafraichissement = temps_actuel; //Pour mettre à jour le dernier temps de rafraîchissement

    valeur_multiplication = get(handles.slider_multiplication, 'Value');
    set(handles.slider_multi_value_text, 'String', msprintf("%.3f", valeur_multiplication)); 


    img1 = imread(chemin_complet);

    ratio = valeur_multiplication;
    img_multiplication = min(double(img1) * ratio, 255);
    img_multiplication = uint8(img_multiplication);

    subplot(1, 2, 1);
    axes_properties = gca();
    axes_properties.axes_bounds = [-0.040, 0.173, 0.51, 0.60];
    imshow(img1);
    title("Image Originale", 'color', 'white', 'fontsize', 4, 'font_style', 8);

    subplot(1, 2, 2);
    axes_properties = gca();
    axes_properties.axes_bounds = [0.530, 0.173, 0.51, 0.60];
    imshow(img_multiplication);
    title("Image Multipliée", 'color', 'white', 'fontsize', 4, 'font_style', 8);
    
    img_sortie =img_multiplication; 
    fn_bout_enregistrer(f, 0.7,  0.23, 0.17, 0.05 , 'Enregistrer',26);
endfunction




//-------------------------------------------------------------------------------//

//Bouton qui sera appeler pour le bouton + qui permet de changer de menu
function btn_menu2_callback(handles)
    global f; 
    global handles;
    global chemin_dossier_menu;
    delete("all");
    
    chemin_img_menu= chemin_dossier_menu + filesep() + "menu_traitement_image2.png"; 
     
    afficher_background_image(chemin_img_menu);

    texte = "<html>Addition<br>"+"Image"; 
    handles.btn_addition_image = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.12, 0.01, 0.12, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_addition_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');
    
    texte = "<html>Soustraction<br>"+"Image"; 
    handles.btn_soustraction_image = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.26, 0.01, 0.12, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_soustraction_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');
    
    texte = "<html>Rotation<br>"+"Image"; 
    handles.btn_rotation = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.40, 0.01, 0.12, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_rotation_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');
    
    texte = "<html>Inverser<br> Couleur<br>"+"Image";    
    handles.btn_inverserCouleur = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.54, 0.01, 0.12, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_inverserCouleur_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');

    texte = "<html>Symetrie<br>"+"Image"; 
    handles.btn_symetrie = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.68, 0.01, 0.12, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_symetrie_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');
        
    
    handles.btn_back2 = uicontrol(f, 'unit', 'normalized', ...
        'String', "<-", ...
        'Position', [0.05, 0.01, 0.06, 0.11], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_menu1_callback(handles)', ...
        'Visible', 'on', ...
        'Background', [28/255, 54/255, 84/255], ...
        'FontSize', 30, ...
        'ForegroundColor', [1, 1, 1], ...
        'HorizontalAlignment', 'center');
    
    handles.btn_next2 = uicontrol(f, 'unit', 'normalized', ...
        'String', '->', ...
        'Position',  [0.85, 0.01, 0.06, 0.11], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_menu3_callback', ...
        'Visible', 'on',...
        'Background' , [28/255,54/255,84/255],...
        'FontSize', 30,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');
   
    fn_bout_aide(f);     
endfunction




//-------------------------------------------------------------------------------//
//---------------------------- !!! MENU 2 !!!------------------------------------//
//-------------------------------------------------------------------------------//


//-------------------------------------------------------------------------------//

//Bouton qui sera appeler pour le menu traitement ' Addition Image'

function btn_addition_callback(handles)
    global f;
    global handles;
    global chemin_dossier_menu;
    delete("all");
    
    chemin_img_menu= chemin_dossier_menu + filesep() + "menu_traitement_image6.png"; 
     
    afficher_background_image(chemin_img_menu);


    texte = "<html>Choisir<br>"+"Image"; 
    handles.btn_choisir_image = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.05, 0.01, 0.07, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_choisir_image_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');
    
    texte = "<html>Choisir<br>"+"Seconde<br>"+"Image"; 
    handles.btn_choisir_image2 = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.13, 0.01, 0.07, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_choisir_image2_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');

    texte = "<html>Lancer<br>"+"Addition"; 
    handles.btn_lancer_addition = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.22, 0.01, 0.15, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_lancer_addition_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[0, 0.9 ,0],..
        'HorizontalAlignment', 'center');

    texte = "<html>Soustraction<br>"+"Image"; 
    handles.btn_soustraction_image = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.50, 0.01, 0.1, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_soustraction_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');

    texte = "<html>Rotation<br>"+"Image"; 
    handles.btn_rotation = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.61, 0.01, 0.1, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_rotation_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');

    texte = "<html>Inverser <br> Couleur<br>"+"Image";    
    handles.btn_inverserCouleur = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.72, 0.01, 0.1, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_inverserCouleur_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');

    texte = "<html>Symetrie<br>"+"Image"; 
    handles.btn_symetrie = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.83, 0.01, 0.1, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_symetrie_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');

    handles.btn_back2 = uicontrol(f, 'unit', 'normalized', ...
        'String', "<-", ...
        'Position', [0.44, 0.01, 0.06, 0.11], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_menu1_callback(handles)', ...
        'Visible', 'on', ...
        'Background', [28/255, 54/255, 84/255], ...
        'FontSize', 30, ...
        'ForegroundColor', [1, 1, 1], ...
        'HorizontalAlignment', 'center');

    handles.btn_next2 = uicontrol(f, 'unit', 'normalized', ...
        'String', '->', ...
        'Position', [0.94, 0.01, 0.06, 0.11], ...
        'Callback', 'btn_menu3_callback', ...
        'Visible', 'on',...
        'Background' , [28/255,54/255,84/255],...
        'FontSize', 30,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');

    fn_bout_aide(f);        
endfunction



//-------------------------------------------------------------------------------//

//Bouton qui sera appeler pour le menu traitement 'Soustraction Image'

function btn_soustraction_callback(handles)
    global f; 
    global chemin_dossier_menu;
    delete("all");
    
    chemin_img_menu= chemin_dossier_menu + filesep() + "menu_traitement_image6.png"; 
     
    afficher_background_image(chemin_img_menu);

    texte = "<html>Choisir<br>"+"Image"; 
    handles.btn_choisir_image = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.05, 0.01, 0.07, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_choisir_image_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');
    
    texte = "<html>Choisir<br>"+"Seconde<br>"+"Image"; 
    handles.btn_choisir_image2 = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.13, 0.01, 0.07, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_choisir_image2_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');

    texte = "<html>Lancer<br>"+"Soustraction"; 
    handles.btn_lancer_soustraction = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.22, 0.01, 0.15, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_lancer_soustraction_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[0, 0.9 ,0],...
        'HorizontalAlignment', 'center');

    texte = "<html>Addition<br>"+"Image"; 
    handles.btn_addition_image = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.50, 0.01, 0.1, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_addition_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');

    texte = "<html>Rotation<br>"+"Image"; 
    handles.btn_rotation = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.61, 0.01, 0.1, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_rotation_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');

    texte = "<html>Inverser <br> Couleur<br>"+"Image";    
    handles.btn_inverserCouleur = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.72, 0.01, 0.1, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_inverserCouleur_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');

    texte = "<html>Symetrie<br>"+"Image"; 
    handles.btn_symetrie = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.83, 0.01, 0.1, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_symetrie_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');

    handles.btn_back2 = uicontrol(f, 'unit', 'normalized', ...
        'String', "<-", ...
        'Position', [0.44, 0.01, 0.06, 0.11], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_menu1_callback(handles)', ...
        'Visible', 'on', ...
        'Background', [28/255, 54/255, 84/255], ...
        'FontSize', 30, ...
        'ForegroundColor', [1, 1, 1], ...
        'HorizontalAlignment', 'center');

    handles.btn_next2 = uicontrol(f, 'unit', 'normalized', ...
        'String', '->', ...
        'Position', [0.94, 0.01, 0.06, 0.11], ...
        'Callback', 'btn_menu3_callback', ...
        'Visible', 'on',...
        'Background' , [28/255,54/255,84/255],...
        'FontSize', 30,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');
        
    fn_bout_aide(f);
endfunction


//-------------------------------------------------------------------------------//

//Bouton qui sera appeler pour le menu traitement ' Rotation  Image'
global valeur_rotation;
function btn_rotation_callback(handles)
    global f;
    global handles;
    global chemin_dossier_menu;
    delete("all");
    
    // Initialisation de valeur_seuil pour eviter le problème de tampon
    valeur_rotation = 0;
    
    chemin_img_menu= chemin_dossier_menu + filesep() + "menu_traitement_image2.png"; 
     
    afficher_background_image(chemin_img_menu); 

    texte = "<html>Choisir<br>"+"Image"; 
    handles.btn_choisir_image = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.05, 0.01, 0.15, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_choisir_image_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');

    texte = "<html>Lancer<br>"+"Rotation";
    handles.btn_lancer_rotation = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.22, 0.01, 0.15, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_lancer_rotation_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[0, 0.9 ,0],...
        'HorizontalAlignment', 'center');

    texte = "<html>Addition<br>"+"Image"; 
    handles.btn_addition_image = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.50, 0.01, 0.1, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_addition_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');

    texte = "<html>Soustraction<br>"+"Image"; 
    handles.btn_soustraction_image = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.61, 0.01, 0.1, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_soustraction_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');

    texte = "<html>Inverser <br> Couleur<br>"+"Image";    
    handles.btn_inverserCouleur = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.72, 0.01, 0.1, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_inverserCouleur_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');

    texte = "<html>Symetrie<br>"+"Image"; 
    handles.btn_symetrie = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.83, 0.01, 0.1, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_symetrie_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');

    handles.btn_back2 = uicontrol(f, 'unit', 'normalized', ...
        'String', "<-", ...
        'Position', [0.44, 0.01, 0.06, 0.11], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_menu1_callback(handles)', ...
        'Visible', 'on', ...
        'Background', [28/255, 54/255, 84/255], ...
        'FontSize', 30, ...
        'ForegroundColor', [1, 1, 1], ...
        'HorizontalAlignment', 'center');

    handles.btn_next2 = uicontrol(f, 'unit', 'normalized', ...
        'String', '->', ...
        'Position', [0.94, 0.01, 0.06, 0.11], ...
        'Callback', 'btn_menu3_callback', ...
        'Visible', 'on',...
        'Background' , [28/255,54/255,84/255],...
        'FontSize', 30,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');
        
        
   handles.slider_rotation = uicontrol(f, ...
        'unit', 'normalized', ...
        'BackgroundColor', [0.8, 0.8, 0.8], ... 
        'Enable', 'on', ...
        'FontName', 'Tahoma', ...
        'FontSize', 12, ...
        'ForegroundColor', [0, 0, 0], ...
        'HorizontalAlignment', 'left', ...
        'Max', 360, ...
        'Min', 0, ...
        'Position', [0.11, 0.17, 0.2, 0.05], ...
        'Relief', 'default', ...
        'SliderStep', [10/255, 10/255], ... // pas de 10
        'Style', 'slider', ...
        'Value', 0, ...
        'Tag', 'slider_rotation', ...
        'Callback', 'slider_rotation_callback(handles);');       
        
    //Pour afficher la valeur actuelle fasn le slider
    handles.slider_rota_value_text = uicontrol(f, ...
        'Style', 'text', ...
        'unit', 'normalized', ...
        'FontSize', 12, ...
        'FontWeight', 'bold', ...
        'Position', [0.32, 0.17, 0.07, 0.05], ... 
        'String', '0', ... 
        'ForegroundColor', [1, 0, 0]); 

    // Texte instruction
    handles.slider_rota_instruction_text = uicontrol(f, ...
        'Style', 'text', ...
        'unit', 'normalized', ...
        'FontSize', 14, ...
        'FontWeight', 'bold', ...
        'ForegroundColor', [1, 0, 0], ...
        'Position', [0.105, 0.23, 0.222, 0.05], ... 
        'ForegroundColor', [0.7, 0, 0.7], ... 
        'Background', [98/255 , 152/255, 209/255], ...
        'String', 'Choisissez la valeur de rotation');

    fn_bout_aide(f);
endfunction

// Fonction pour afficher la valeur en texte du slider
function slider_rotation_callback(handles)
    global handles;
    global valeur_rotation;
    valeur_rotation = get(handles.slider_rotation, 'Value');
    set(handles.slider_rota_value_text, 'String', msprintf("%d", valeur_rotation)); 
endfunction


//-------------------------------------------------------------------------------//

//Bouton qui sera appeler pour un traitement

function btn_inverserCouleur_callback(handles)
    global f; 
    global chemin_dossier_menu;
    delete("all");
    chemin_img_menu= chemin_dossier_menu + filesep() + "menu_traitement_image2.png"; 
     
    afficher_background_image(chemin_img_menu);

    texte = "<html>Choisir<br>"+"Image"; 
    handles.btn_choisir_image = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.05, 0.01, 0.15, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_choisir_image_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');

    texte = "<html>Lancer<br>"+"Inverser <br>Couleur";
    handles.btn_lancer_inverserCouleur = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.22, 0.01, 0.15, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_lancer_inverserCouleur_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[0, 0.9 ,0],...
        'HorizontalAlignment', 'center');

    texte = "<html>Addition<br>"+"Image"; 
    handles.btn_addition_image = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.50, 0.01, 0.1, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_addition_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');

    texte = "<html>Soustraction<br>"+"Image"; 
    handles.btn_soustraction_image = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.61, 0.01, 0.1, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_soustraction_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');

    texte = "<html>Rotation<br>"+"Image"; 
    handles.btn_rotation = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.72, 0.01, 0.1, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_rotation_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');

    texte = "<html>Symetrie<br>"+"Image"; 
    handles.btn_symetrie = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.83, 0.01, 0.1, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_symetrie_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');

    handles.btn_back2 = uicontrol(f, 'unit', 'normalized', ...
        'String', "<-", ...
        'Position', [0.44, 0.01, 0.06, 0.11], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_menu1_callback(handles)', ...
        'Visible', 'on', ...
        'Background', [28/255, 54/255, 84/255], ...
        'FontSize', 30, ...
        'ForegroundColor', [1, 1, 1], ...
        'HorizontalAlignment', 'center');

    handles.btn_next2 = uicontrol(f, 'unit', 'normalized', ...
        'String', '->', ...
        'Position', [0.94, 0.01, 0.06, 0.11], ...
        'Callback', 'btn_menu3_callback', ...
        'Visible', 'on',...
        'Background' , [28/255,54/255,84/255],...
        'FontSize', 30,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');
        
    fn_bout_aide(f);
endfunction


//-------------------------------------------------------------------------------//

//Bouton qui sera appeler pour un traitement
global symetrie_choisie ;
function btn_symetrie_callback(handles)
    global f; 
    global chemin_dossier_menu;
    global symetrie_choisie menu_deroul_symetrie ;
    delete("all");
    
    chemin_img_menu= chemin_dossier_menu + filesep() + "menu_traitement_image2.png"; 
     
    afficher_background_image(chemin_img_menu);

    texte = "<html>Choisir<br>"+"Image"; 
    handles.btn_choisir_image = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.05, 0.01, 0.15, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_choisir_image_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');

    texte = "<html>Lancer <br>Symétrie<br>";
    handles.btn_lancer_symetrie = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position',[0.22, 0.01, 0.15, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_lancer_symetrie_callback', ...
        'Visible', 'on', ...
        'Background', [38/255, 64/255, 94/255], ...
        'FontSize', 20, ...
        'ForegroundColor', [0, 0.9, 0], ...
        'HorizontalAlignment', 'center');

    texte = "<html>Addition<br>"+"Image"; 
    handles.btn_addition_image = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.50, 0.01, 0.1, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_addition_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');

    texte = "<html>Soustraction<br>"+"Image"; 
    handles.btn_soustraction_image = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.61, 0.01, 0.1, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_soustraction_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');

    texte = "<html>Rotation<br>"+"Image"; 
    handles.btn_rotation = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.72, 0.01, 0.1, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_rotation_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');

    texte = "<html>Inverser <br>Couleur<br>"+"Image";    
    handles.btn_inverserCouleur = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.83, 0.01, 0.1, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_inverserCouleur_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');

    handles.btn_back2 = uicontrol(f, 'unit', 'normalized', ...
        'String', "<-", ...
        'Position', [0.44, 0.01, 0.06, 0.11], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_menu1_callback(handles)', ...
        'Visible', 'on', ...
        'Background', [28/255, 54/255, 84/255], ...
        'FontSize', 30, ...
        'ForegroundColor', [1, 1, 1], ...
        'HorizontalAlignment', 'center');

    handles.btn_next2 = uicontrol(f, 'unit', 'normalized', ...
        'String', '->', ...
        'Position', [0.94, 0.01, 0.06, 0.11], ...
        'Callback', 'btn_menu3_callback', ...
        'Visible', 'on',...
        'Background' , [28/255,54/255,84/255],...
        'FontSize', 30,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');
        
        
    //menu deroulant pour choisir la symétrie
    menu_deroul_symetrie =  uicontrol(f,'unit','normalized',...
        'BackgroundColor',[0.8, 0.8, 0.8],...
        'Enable','on', ...
        'FontSize',14,...
        'ForegroundColor',[0,0,0],...
        'Position',[0.13, 0.23, 0.17, 0.05],...
        'String', "Choisissez votre symétrie|Symétrie horizontale|Symétrie verticale",...
        'Style','popupmenu',...
        'Value',1,...
        'VerticalAlignment','middle',...
        'Visible','on');
   
    fn_bout_aide(f);   
endfunction



//-------------------------------------------------------------------------------//
//---------------------------- !!! MENU 3 !!!------------------------------------//
//-------------------------------------------------------------------------------//


//Fonction btn_menu3_callback 
function btn_menu3_callback(handles)
    global f; 
    global handles;
    global chemin_dossier_menu;
    delete("all");
    
    chemin_img_menu = chemin_dossier_menu + filesep() + "menu_traitement_image2.png"; 
    afficher_background_image(chemin_img_menu);
    
    // Bouton "<-" pour revenir au menu précédent
    handles.btn_back = uicontrol(f, 'unit', 'normalized', ...
        'String', "<-", ...
        'Position', [0.05, 0.01, 0.06, 0.11], ... 
        'Style', 'pushbutton', ...
        'Callback', 'btn_menu3_callback(handles)', ...
        'Visible', 'on', ...
        'Background', [28/255, 54/255, 84/255], ...
        'FontSize', 30, ...
        'ForegroundColor', [1, 1, 1], ...
        'HorizontalAlignment', 'center');

    // Bouton Filtre Passe-Bas
    texte = "<html>Filtre<br>" + "Passe-Bas"; 
    handles.btn_filtre_passe_bas = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.12, 0.01, 0.12, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_filtre_passe_bas_callback', ...
        'Visible', 'on', ...
        'Background', [38/255, 64/255, 94/255], ...
        'FontSize', 20, ...
        'ForegroundColor', [1, 1, 1], ...
        'HorizontalAlignment', 'center');

    // Bouton Filtre Passe-Haut
    texte = "<html>Filtre<br>" + "Passe-Haut"; 
    handles.btn_filtre_passe_haut = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.26, 0.01, 0.12, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_filtre_passe_haut_callback', ...
        'Visible', 'on', ...
        'Background', [38/255, 64/255, 94/255], ...
        'FontSize', 20, ...
        'ForegroundColor', [1, 1, 1], ...
        'HorizontalAlignment', 'center');

    texte = "<html>Appliquer<br>"+"Filtre Couleur"; 
    handles.btn_filtre_couleur = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position',[0.40, 0.01, 0.12, 0.1], ...
        'Callback', 'btn_filtre_couleur_callback(handles)', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');
        
     // Bouton "<-" pour appeler btn_menu2_callback
    handles.btn_back3 = uicontrol(f, 'unit', 'normalized', ...
        'String', "<-", ...
        'Position', [0.05, 0.01, 0.06, 0.11], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_menu2_callback(handles)', ...
        'Visible', 'on', ...
        'Background', [28/255, 54/255, 84/255], ...
        'FontSize', 30, ...
        'ForegroundColor', [1, 1, 1], ...
        'HorizontalAlignment', 'center');

    // Bouton "->" pour appeler btn_menu1_callback
    handles.btn_next3 = uicontrol(f, 'unit', 'normalized', ...
        'String', '->', ...
        'Position', [0.85, 0.01, 0.06, 0.11], ... // dimensions du bouton "+"
        'Style', 'pushbutton', ...
        'Callback', 'btn_menu1_callback(handles)', ...
        'Visible', 'on', ...
        'Background', [28/255, 54/255, 84/255], ...
        'FontSize', 30, ...
        'ForegroundColor', [1, 1, 1], ...
        'HorizontalAlignment', 'center');
        
    fn_bout_aide(f);
endfunction




global filtre_passe_bas_choisie;
function btn_filtre_passe_bas_callback(handles)
    global f;
    global chemin_dossier_menu;
    global filtre_passe_bas_choisie menu_deroul_filtre_passe_bas;
    
    delete("all");
    
    chemin_img_menu = chemin_dossier_menu + filesep() + "menu_traitement_image2.png";
    afficher_background_image(chemin_img_menu);

    texte = "<html>Choisir<br>" + "Image";
    handles.btn_choisir_image = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.05, 0.01, 0.15, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_choisir_image_callback', ...
        'Visible', 'on', ...
        'Background', [38/255, 64/255, 94/255], ...
        'FontSize', 20, ...
        'ForegroundColor', [1, 1, 1], ...
        'HorizontalAlignment', 'center');

    texte = "<html>Lancer <br>Filtre Passe-Bas";
    handles.btn_lancer_filtre = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.22, 0.01, 0.15, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_lancer_filtre_passe_bas_callback', ...
        'Visible', 'on', ...
        'Background', [38/255, 64/255, 94/255], ...
        'FontSize', 20, ...
        'ForegroundColor', [0, 0.9, 0], ...
        'HorizontalAlignment', 'center');

    texte = "<html>Filtre<br>"+"Passe-Haut"; 
    handles.btn_filtre_passe_haut = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.50, 0.01, 0.1, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_filtre_passe_haut_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');
    
    texte = "<html>Appliquer<br>Filtre<br>"+"Couleur"; 
    handles.btn_filtre_couleur = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.61, 0.01, 0.1, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_filtre_couleur_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');

    handles.btn_back = uicontrol(f, 'unit', 'normalized', ...
        'String', "<-", ...
        'Position', [0.44, 0.01, 0.06, 0.11], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_menu2_callback(handles)', ...
        'Visible', 'on', ...
        'Background', [28/255, 54/255, 84/255], ...
        'FontSize', 30, ...
        'ForegroundColor', [1, 1, 1], ...
        'HorizontalAlignment', 'center');

    handles.btn_next = uicontrol(f, 'unit', 'normalized', ...
        'String', "->", ...
        'Position', [0.94, 0.01, 0.06, 0.11], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_menu1_callback', ...
        'Visible', 'on', ...
        'Background', [28/255, 54/255, 84/255], ...
        'FontSize', 30, ...
        'ForegroundColor', [1, 1, 1], ...
        'HorizontalAlignment', 'center');

    //Menu deroulant pour choisir le filtre passe-haut
    menu_deroul_filtre_passe_bas = uicontrol(f, 'unit', 'normalized', ...
        'BackgroundColor', [0.8, 0.8, 0.8], ...
        'Enable', 'on', ...
        'FontSize', 14, ...
        'ForegroundColor', [0, 0, 0], ...
        'Position', [0.10, 0.23, 0.23, 0.05], ...
        'String', "Choisissez votre filtre passe-bas ou Bruit| Bruit Gaussian |Bruit Salt & Pepper|Filtre Moyenneur (3x3)|Filtre Médian|Filtre Gaussien (3x3)", ...
        'Style', 'popupmenu', ...
        'Value', 1, ...
        'VerticalAlignment', 'middle', ...
        'Visible', 'on');

    fn_bout_aide(f);
endfunction




global filtre_passe_haut_choisie;
function btn_filtre_passe_haut_callback(handles)
    global f;
    global chemin_dossier_menu;
    global filtre_passe_haut_choisie menu_deroul_filtre_passe_haut;
    
    delete("all");
    
    chemin_img_menu = chemin_dossier_menu + filesep() + "menu_traitement_image2.png";
    afficher_background_image(chemin_img_menu);

    texte = "<html>Choisir<br>" + "Image";
    handles.btn_choisir_image = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.05, 0.01, 0.15, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_choisir_image_callback', ...
        'Visible', 'on', ...
        'Background', [38/255, 64/255, 94/255], ...
        'FontSize', 20, ...
        'ForegroundColor', [1, 1, 1], ...
        'HorizontalAlignment', 'center');

    texte = "<html>Lancer <br>Filtre Passe-Haut";
    handles.btn_lancer_filtre = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.22, 0.01, 0.15, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_lancer_filtre_passe_haut_callback', ...
        'Visible', 'on', ...
        'Background', [38/255, 64/255, 94/255], ...
        'FontSize', 20, ...
        'ForegroundColor', [0, 0.9, 0], ...
        'HorizontalAlignment', 'center');

    texte = "<html>Filtre<br>"+"Passe-Bas"; 
    handles.btn_filtre_passe_bas = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.50, 0.01, 0.1, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_filtre_passe_bas_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');
    
    texte = "<html>Appliquer<br>Filtre<br>"+"Couleur"; 
    handles.btn_filtre_couleur = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.61, 0.01, 0.1, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_filtre_couleur_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');

    handles.btn_back = uicontrol(f, 'unit', 'normalized', ...
        'String', "<-", ...
        'Position', [0.44, 0.01, 0.06, 0.11], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_menu2_callback(handles)', ...
        'Visible', 'on', ...
        'Background', [28/255, 54/255, 84/255], ...
        'FontSize', 30, ...
        'ForegroundColor', [1, 1, 1], ...
        'HorizontalAlignment', 'center');

    handles.btn_next = uicontrol(f, 'unit', 'normalized', ...
        'String', "->", ...
        'Position', [0.94, 0.01, 0.06, 0.11], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_menu1_callback', ...
        'Visible', 'on', ...
        'Background', [28/255, 54/255, 84/255], ...
        'FontSize', 30, ...
        'ForegroundColor', [1, 1, 1], ...
        'HorizontalAlignment', 'center');

    //Menu deroulant pour choisir le filtre passe-haut
    menu_deroul_filtre_passe_haut = uicontrol(f, 'unit', 'normalized', ...
        'BackgroundColor', [0.8, 0.8, 0.8], ...
        'Enable', 'on', ...
        'FontSize', 14, ...
        'ForegroundColor', [0, 0, 0], ...
        'Position', [0.10, 0.23, 0.2, 0.05], ...
        'String', "Choisissez votre filtre passe-haut|Laplacien-4|Laplacien-8|Sobel Horizontal|Sobel Vertical|Module du gradient de Sobel", ...
        'Style', 'popupmenu', ...
        'Value', 1, ...
        'VerticalAlignment', 'middle', ...
        'Visible', 'on');

    fn_bout_aide(f);
endfunction



global valeur_rouge;
global valeur_vert;
global valeur_bleu;
function btn_filtre_couleur_callback(handles)
    global f;
    global chemin_dossier_menu;
    global handles;
    
    delete("all");
       
    // Initialisation de valeur_rouge vert bleu pour eviter le probleme de tampon
    valeur_rouge = 0;
    valeur_vert = 0;
    valeur_bleu = 0;
    
    chemin_img_menu = chemin_dossier_menu + filesep() + "menu_traitement_image2.png";
    afficher_background_image(chemin_img_menu);

    texte = "<html>Choisir<br>" + "Image";
    handles.btn_choisir_image = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.05, 0.01, 0.15, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_choisir_image_callback', ...
        'Visible', 'on', ...
        'Background', [38/255, 64/255, 94/255], ...
        'FontSize', 20, ...
        'ForegroundColor', [1, 1, 1], ...
        'HorizontalAlignment', 'center');

    texte = "<html>Filtre<br>"+"Passe-Bas"; 
    handles.btn_filtre_passe_bas = uicontrol(f, 'unit', 'normalized', ...
        'String', texte, ...
        'Position', [0.50, 0.01, 0.1, 0.1], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_filtre_passe_bas_callback', ...
        'Visible', 'on',...
        'Background' , [38/255,64/255,94/255],...
        'FontSize', 20,...
        'ForegroundColor',[1, 1 ,1],..
        'HorizontalAlignment', 'center');
        
    texte = "<html>Filtre<br>"+"Passe-Haut"; 
    handles.btn_filtre_passe_haut = uicontrol(f, 'unit', 'normalized', ...
            'String', texte, ...
            'Position', [0.61, 0.01, 0.1, 0.1], ...
            'Style', 'pushbutton', ...
            'Callback', 'btn_filtre_passe_haut_callback', ...
            'Visible', 'on',...
            'Background' , [38/255,64/255,94/255],...
            'FontSize', 20,...
            'ForegroundColor',[1, 1 ,1],..
            'HorizontalAlignment', 'center');

    handles.btn_back = uicontrol(f, 'unit', 'normalized', ...
        'String', "<-", ...
        'Position', [0.44, 0.01, 0.06, 0.11], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_menu2_callback(handles)', ...
        'Visible', 'on', ...
        'Background', [28/255, 54/255, 84/255], ...
        'FontSize', 30, ...
        'ForegroundColor', [1, 1, 1], ...
        'HorizontalAlignment', 'center');

    handles.btn_next = uicontrol(f, 'unit', 'normalized', ...
        'String', "->", ...
        'Position', [0.94, 0.01, 0.06, 0.11], ...
        'Style', 'pushbutton', ...
        'Callback', 'btn_menu1_callback', ...
        'Visible', 'on', ...
        'Background', [28/255, 54/255, 84/255], ...
        'FontSize', 30, ...
        'ForegroundColor', [1, 1, 1], ...
        'HorizontalAlignment', 'center');

    handles.menu_deroul_filtre = uicontrol(f, ...
        'unit', 'normalized', ...
        'BackgroundColor', [0.8, 0.8, 0.8], ...
        'Enable', 'on', ...
        'FontSize', 12, ...
        'ForegroundColor', [0, 0, 0], ...
        'Position', [0.03, 0.17, 0.15, 0.05], ...
        'String', "Choisissez votre Filtre|Filtre Couleur Monochrome|Filtre Teinte |Filtre Amplification|Filtre Suppression |Normalisation Couleur Selon", ...
        'Style', 'popupmenu', ...
        'Value', 1, ...
        'VerticalAlignment', 'middle', ...
        'Visible', 'on', ...
        'Tag', 'menu_deroul_filtre', ...
        'Callback', 'checkbox_deroul_couleur_callback(handles);');

     // Checkbox pour la couleur rouge
    handles.checkbox_rouge = uicontrol(f, ...
        'Style', 'checkbox', ...
        'unit', 'normalized', ...
        'Position', [0.20, 0.17, 0.06, 0.05], ...
        'String', 'Rouge', ...
        'FontSize', 14, ...
        'ForegroundColor', [1, 0, 0], ...
        'BackgroundColor', [100/255, 151/255, 208/255], ...
        'Value', 0, ... // Décoché par défaut
        'Callback', 'checkbox_deroul_couleur_callback(handles);');

    handles.checkbox_vert = uicontrol(f, ...
        'Style', 'checkbox', ...
        'unit', 'normalized', ...
        'Position', [0.27, 0.17, 0.05, 0.05], ...
        'String', 'Vert', ...
        'FontSize', 14, ...
        'ForegroundColor', [0, 0.55, 0], ...
        'BackgroundColor', [105/255, 148/255, 205/255], ...
        'Value', 0, ... // Décoché par défaut
        'Callback', 'checkbox_deroul_couleur_callback(handles);');

    handles.checkbox_bleu = uicontrol(f, ...
        'Style', 'checkbox', ...
        'unit', 'normalized', ...
        'Position', [0.33, 0.17, 0.05, 0.05], ...
        'String', 'Bleu', ...
        'FontSize', 14, ...
        'ForegroundColor', [0, 0, 1], ...
        'BackgroundColor', [108/255, 146/255, 203/255], ...
        'Value', 0, ... // Décoché par défaut
        'Callback', 'checkbox_deroul_couleur_callback(handles);');

    // Texte d'instruction
    texte = "<html>Selectionnez le filtre à appliquer et <br>Cochez pour appliquer un filtre couleur"; 
    handles.checkbox_instruction_text = uicontrol(f, ...
        'Style', 'text', ...
        'unit', 'normalized', ...
        'FontSize', 14, ...
        'FontWeight', 'bold', ...
        'ForegroundColor', [0, 0.6, 0], ... 
        'BackgroundColor', [98/255, 152/255, 209/255], ...
        'Position', [0.105, 0.23, 0.222, 0.05], ...
        'String',texte );
       
    fn_bout_aide(f); 
endfunction



// fonction qui lance en fonction des checkbox et du menu deroulant 
function checkbox_deroul_couleur_callback(handles)
    global handles;
    global valeur_rouge;
    global valeur_vert;
    global valeur_bleu;
    
    global chemin_complet img_sortie menu_deroul_filtre_personnalise;
    
    //On verifie l'état des checkbox
    choix_filtre = get(handles.menu_deroul_filtre, 'Value');
    case_rouge = get(handles.checkbox_rouge, 'Value'); //1 si activé, 0 sinon
    case_vert = get(handles.checkbox_vert, 'Value');
    case_bleu = get(handles.checkbox_bleu, 'Value');
    
    img = imread(chemin_complet);
    
    [rows, cols, canaux] = size(img);
    
    //Si l'image est niveau de gris on converti en image RGB
    if canaux == 1
        img = repmat(img, [1, 1, 3]);
    end

    img_filtree = img;
    
    // Appliquer le filtre en fonction du choix
    switch choix_filtre
        case 2 // fIltre Couleur Monochrome
            if case_rouge
                img_filtree(:,:,2) = 0;   //Canal vert à 0
                img_filtree(:,:,3) = 0;   //Canal bleu à 0
            end
            if case_vert
                img_filtree(:,:,1) = 0;   //Canal rouge à 0
                img_filtree(:,:,3) = 0; 
            end
            if case_bleu
                img_filtree(:,:,1) = 0;   
                img_filtree(:,:,2) = 0; 
            end
        case 3 // Filtre Teinte Couleur 
            if case_rouge
                img_filtree(:,:,1) = 255; //Rend le canal rouge dominant
            end
            if case_vert
                img_filtree(:,:,2) = 255; 
            end
            if case_bleu
                img_filtree(:,:,3) = 255; 
            end
    
        case 4 // Filtre Amplification
            if case_rouge
                img_filtree(:,:,1) = img_filtree(:,:,1) * 2; 
                img_filtree(:,:,1) = min(img_filtree(:,:,1), 255); //Limite à 255
            end
            if case_vert
                img_filtree(:,:,2) = img_filtree(:,:,2) * 2; 
                img_filtree(:,:,2) = min(img_filtree(:,:,2), 255); 
            end
            if case_bleu
                img_filtree(:,:,3) = img_filtree(:,:,3) * 2; 
                img_filtree(:,:,3) = min(img_filtree(:,:,3), 255);
            end
    
        case 5 // Filtre Suppression
            if case_rouge
                img_filtree(:,:,1) = 0; 
            end
            if case_vert
                img_filtree(:,:,2) = 0;
            end
            if case_bleu
                img_filtree(:,:,3) = 0;
            end
            
        case 6 //Normalisation des couleurs
            pr = double(img_filtree(:, :, 1)); 
            pg = double(img_filtree(:, :, 2)); 
            pb = double(img_filtree(:, :, 3)); 
    
            //Calcul de la somme des canaux chosii
            Ss = case_rouge * pr + case_vert * pg + case_bleu * pb;
        
            //Évite la division par zéro
            Ss(Ss == 0) = 1;
        
            //Normalisation des canaux chosii
            if case_rouge
                img_filtree(:, :, 1) = uint8(255 * pr ./ Ss);
            end
            if case_vert
                img_filtree(:, :, 2) = uint8(255 * pg ./ Ss);
            end
            if case_bleu
                img_filtree(:, :, 3) = uint8(255 * pb ./ Ss);
            end
  
    end
       
    titre_filtre = "Image avec Filtre Personnalisé";

    //Affichage des images
    subplot(1, 2, 1);
    axes_properties = gca();
    axes_properties.auto_clear = 'on';
    axes_properties.axes_bounds = [-0.040, 0.173, 0.51, 0.60];
    imshow(img);
    title("Image originale", 'FontSize', 5, 'Color', 'white');

    subplot(1, 2, 2);
    axes_properties = gca(); 
    axes_properties.auto_clear = 'on';
    axes_properties.axes_bounds = [0.530, 0.173, 0.51, 0.60];
    imshow(img_filtree);
    title(titre_filtre, 'FontSize', 5, 'Color', 'white');

    img_sortie = img_filtree;
    fn_bout_enregistrer(f, 0.7, 0.23, 0.17, 0.05, 'Enregistrer', 26);
endfunction




//-------------------------------------------------------------------------------//
//---------- !!! FOCNTION QUI DEMARRE LES TRAITEMENT DES IMAGES -----------------//
//--------- (donc pas les menus et les background) ------------------------------//
//----------------------   !!! DU MENU 1  !!! -----------------------------------//
//-------------------------------------------------------------------------------//


//Fonction qui permettent de choisir des images dans les dossiers 
global img_choisi chemin_complet  axe_image1 axis_image2 img_sortie;;
function btn_choisir_image_callback(handles)
     global img_choisi;
     global handles
     global chemin_complet;

    [NomFichier, chemin] = uigetfile(["*"], "Choisissez une image");
    if chemin == "" then
       messagebox("Aucune image chargee.", "Erreur", "error", "modal");
       return;
    else
        chemin_complet = chemin + filesep() + NomFichier;  //filesep pour le séparateur selon pc
        img_choisi =imread(chemin_complet);
        handles.img_choisi = img_choisi; 
                      
    end
endfunction


global img_choisi2 chemin_complet2  axe_image1 axis_image2;
function btn_choisir_image2_callback(handles)
     global img_choisi2;
     global handles
     global chemin_complet2;

    [NomFichier, chemin] = uigetfile(["*"], "Choisissez une image");

    if chemin == "" then
       messagebox("Aucune image chargee.", "Erreur", "error", "modal");
       return;
    else
        chemin_complet2 = chemin + filesep() + NomFichier;  //filesep pour le séparateur selon pc
        img_choisi2 =imread(chemin_complet2);
        handles.img_choisi2 = img_choisi2; 
                    
    end
endfunction



function fn_bout_enregistrer(f, x, y, hauteur, largeur , texte,taille)
    // Création du bouton "Enregistrer l'image" et désactivation initiale
    handles.btn_enregistrer_image = uicontrol(f, 'unit', 'normalized', ...
        'ForegroundColor', [232/255, 163/255, 23/255], ...
        'FontSize', taille, ...
        'FontWeight', 'bold', ...
        'String', texte, ...
        'Position',  [x, y, hauteur, largeur], ...
        'Callback', 'btn_enregistrer_image_callback()', ...
        'Tag', 'btn_quitter', ...
        'Visible', 'on');
endfunction



// Fonction callback pour le bouton "Enregistrer l'image"
function btn_enregistrer_image_callback(handles)
    global img_sortie;  // L'image de sortie générée par une des fonctions de traitement

    // Demande à l'utilisateur où enregistrer l'image
    [NomFichier, chemin] = uiputfile(["*.jpg"; "*.png"], "Enregistrer limage sous...");
    
    if chemin == "" then
       messagebox("Aucune image chargee.", "Erreur", "error", "modal");
       return;
    else
        chemin_complet = chemin + filesep() + NomFichier;  //filesep pour le séparateur selon pc
        
        // Enregistre l'image de sortie au chemin spécifié
        imwrite(img_sortie, chemin_complet);
        disp("Image enregistrée avec succès à : " + chemin_complet);
                    
    end
endfunction


//-------------------------------------------------------------------------------//

// Fonction pour lancer l'affichage de l'image dans l'axe central a partir du Menu 'afficher image'
function btn_lancer_afficher_image_callback()
    global img_choisi chemin_complet axe_image1 handles  img_sortie f; // Declaration des variables globales

    //On cree un nouvel axe au centre de la fenetre pour afficher l'image
    axe_image1 = newaxes();
    axe_image1.margins = [0, 0, 0, 0]; //Pas de marges
    axe_image1.axes_bounds = [0.203, 0.215, 0.6, 0.58]; 
    axe_image1.auto_clear = 'on'; //Pour pas que ca se supperpose


    imshow(img_choisi);
    title(axe_image1, "Image Choisi Affichée",'color','white','fontsize',5, 'font_style',8);
    
    img_sortie =img_choisi;
    fn_bout_enregistrer(f, 0.42, 0.14, 0.17, 0.05, 'Enregister',26); 
endfunction



//-------------------------------------------------------------------------------//

// Fonction pour lancer la fonction ' Agrandir Image 'du Menu du meme nom

function btn_lancer_agrandir_image_callback(handles)
    global img_choisi img_sortie;
    global chemin_complet;
    global valeur_agrandissement;
         
         
    btn_agrandir_image_callback(handles);
    
    x = valeur_agrandissement;
    // Affichage du texte "Traitement en Cours..." en rouge
    texte_traitement = uicontrol("Style", "text", ...
                           "String", "Traitement en Cours ...", ...
                           "ForegroundColor", [1, 0, 0], ...
                           "FontSize", 28, ...
                           "Background", [108/255, 146/255, 204/255] , ...
                           "FontAngle" , "italic" , ...
                           "Position", [430, 600, 300, 30]);

    
    img = imread(chemin_complet);
    if size(img, 3) == 3 then
        img = rgb2gray(img); //On Convertit en niveaux de gris si l'image est en couleur
    end
    [l,c] = size(img);
    
    res = zeros(l*x,c*x);
    val = img'(:);
    k = 1;
    for i=1:x:l*x
        for j=1:x:c*x
            res(i:i+x-1,j:j+x-1) = val(k);
            k = k+1;
        end
    end
    res = uint8(res);

    //Suppression du texte apres traitement
    delete(texte_traitement);

    //Affichage des images d'origine et apres agrandissement
    subplot(1, 1, 1);
    axes_properties = gca();
    axes_properties.axes_bounds = [-0.040, 0.173, 0.51, 0.60];
    imshow(img);
    title(sprintf("Image Originale de taille %d x %d", l, c), 'color', 'white', 'fontsize', 4, 'font_style', 8);

    
    subplot(2, 2, 2);
    axes_properties = gca();
    axes_properties.axes_bounds = [0.530, 0.173, 0.51, 0.60];
    imshow(res);
    title(sprintf("Image Agrandie de taille %d x %d", l * x, c * x), 'color', 'white', 'fontsize', 4, 'font_style', 8);

    
    img_sortie =res; 
    fn_bout_enregistrer(f, 0.7,  0.23, 0.17, 0.05 , 'Enregistrer',26); 
endfunction



//-------------------------------------------------------------------------------//

// Fonction pour lancer la fonction ' Histogramme Image 'du Menu du meme nom

function btn_lancer_histogramme_callback()
    global chemin_complet;
    global f;
    global img_sortie;
    global img_sortie_hist1;
    global img_sortie_hist2;

    btn_histogramme_callback(handles);
    
    // Affichage du texte "Traitement en Cours..." en rouge
    texte_traitement = uicontrol("Style", "text", ...
            "String", "Traitement en Cours ...", ...
            "ForegroundColor", [1, 0, 0], ...
            "FontSize", 28, ...
            "Background", [108/255, 146/255, 204/255] , ...
            "FontAngle" , "italic" , ...
            "Position", [430, 350, 300, 30]); 

    x = imread(chemin_complet);
    
    if size(x, 3) == 3 then
        x = rgb2gray(x);
    end

    [l, c] = size(x);
    
    // Calcul de l'égalisation de l'histogramme
    h = zeros(1, 256);
    for i = 1:l
        for j = 1:c
            h(x(i,j)+1)=h(x(i,j)+1)+1
        end
    end


    // Etape 2
    k=size(h,2)
    for i = 1:k
        somme = 0
        for j = 1:i
            somme = somme + h(j)
        end
        C(i) = somme
    end
    
    // Etape 3
    y = x;
    for i = 1:l
        for j = 1:c
            y(i, j) = 255 * C(x(i, j) + 1) / (l * c);
        end
    end

    // Suppression du texte après traitement
    delete(texte_traitement);
    
    // Affichage de l'image originale
    subplot(2, 2, 1);
    axes_properties = gca();
    axes_properties.axes_bounds = [0.1, 0.140, 0.40, 0.38];
    imshow(x);
    title("Image Originale", 'color', 'white', 'fontsize', 4, 'font_style', 8);

    //Transforme l'histogramme en une image
    img_hist1 = creer_histogramme_iamge(imhist(x));

    // Affichage de l'histogramme original comme image
    subplot(2, 2, 2);
    axes_properties = gca();
    axes_properties.axes_bounds =[0.466, 0.140, 0.40, 0.38]; 
    imshow(img_hist1);
    title("Histogramme Original", 'color', 'white', 'fontsize', 4, 'font_style', 8);

    //Enregistrement de l'histogramme original 
    img_sortie_hist1 = img_hist1;
    fn_bout_enregistrer_hist1(f, 0.835, 0.60, 0.14, 0.06);

    //Affichage de l'image égalisée
    subplot(2, 2, 3);
    axes_properties = gca();
    axes_properties.axes_bounds = [0.1, 0.51, 0.40, 0.38];
    imshow(y);
    title("Image avec égalisation histogramme", 'color', 'white', 'fontsize', 4, 'font_style', 8);
    img_sortie = y;
    fn_bout_enregistrer(f,  0.835, 0.30,  0.14, 0.06 , '<html>Enregistrer <br>Img. Egalisé<br>',17); 


    //Transforme l'histogramme égalisé en une image (Image de barres)
    img_hist2 = creer_histogramme_iamge(imhist(y));

    // Affichage de l'histogramme égalisé comme image
    subplot(2, 2, 4);
    axes_properties = gca();
    axes_properties.axes_bounds = [0.466, 0.51, 0.40, 0.38];
    imshow(img_hist2);  
    title("Histogramme Egalisé", 'color', 'white', 'fontsize', 4, 'font_style', 8);

    // Enregistrement de l'histogramme égalisé
    img_sortie_hist2 = img_hist2;
    fn_bout_enregistrer_hist2(f, 0.835, 0.20,  0.14, 0.06);
endfunction

// Fonction pour transformer l'histogramme en une image
function img = creer_histogramme_iamge(hist)
    //a partir de lhistogramme on obtien les valeur
    hist = hist / max(hist); 
    img = zeros(256, 256);
    
    //cree les barre
    for i = 1:256
        hauteur_barre = round(hist(i) * 256);
        img(256 - hauteur_barre + 1:256, i) = 255; //Rempli du bas vers le haut
    end
    
    img = uint8(img);
endfunction

// Fonction pour créer le bouton d'enregistrement de l'histogramme original
function fn_bout_enregistrer_hist1(f, x, y, hauteur, largeur)
    texte = "<html>Enregistrer <br>Hist. Original<br>"; 
    uicontrol(f, 'unit', 'normalized', ...
        'ForegroundColor', [232/255, 163/255, 23/255], ...
        'FontSize', 17, ...
        'FontWeight', 'bold', ...
        'String', texte, ...
        'Position',  [x, y, hauteur, largeur], ...
        'Callback', 'btn_enregistrer_hist1_callback()', ...
        'Tag', 'btn_enregistrer_hist1', ...
        'Visible', 'on');
endfunction

//Fonction pour créer le bouton d'enregistrement de l'histogramme égalisé
function fn_bout_enregistrer_hist2(f, x, y, hauteur, largeur)
    texte = "<html>Enregistrer <br>Hist. Egalisé<br>"; 
    uicontrol(f, 'unit', 'normalized', ...
        'ForegroundColor', [232/255, 163/255, 23/255], ...
        'FontSize', 17, ...
        'FontWeight', 'bold', ...
        'String', texte, ...
        'Position',  [x, y, hauteur, largeur], ...
        'Callback', 'btn_enregistrer_hist2_callback()', ...
        'Tag', 'btn_enregistrer_hist2', ...
        'Visible', 'on');
endfunction

//Fonction pour enregistrer l'histogramme original
function btn_enregistrer_hist1_callback()
    global img_sortie_hist1;
    [NomFichier, chemin] = uiputfile(["*.jpg"; "*.png"], "Enregistrer lhistogramme original sous..."); 
    
    if chemin == "" then
       messagebox("Aucune image chargee.", "Erreur", "error", "modal");
       return;
    else
        chemin_complet = chemin + filesep() + NomFichier;  //filesep pour le séparateur selon pc
        imwrite(img_sortie_hist1, chemin_complet);
        disp("Image enregistrée avec succès à : " + chemin_complet);                
    end
endfunction

//Fonction pour enregistrer l'histogramme égalisé
function btn_enregistrer_hist2_callback()
    global img_sortie_hist2;
    
    [NomFichier, chemin] = uiputfile(["*.jpg"; "*.png"], "Enregistrer lhistogramme égalisé sous...");
    
    if chemin == "" then
       messagebox("Aucune image choisie", "Erreur", "error", "modal");
       return;
    else
        chemin_complet = chemin + filesep() + NomFichier;  //filesep pour le séparateur selon pc
        imwrite(img_sortie_hist2, chemin_complet);
        disp("Image enregistrée avec succès à : " + chemin_complet);                
    end
endfunction



//-------------------------------------------------------------------------------//

// Fonction pour lancer la fonction ' Seuillage Image 'du Menu du meme nom

function btn_lancer_seuillage_callback(handles)
    global img_choisi;
    global chemin_complet;
    global valeur_seuil;
    global img_sortie;
         
         
    btn_seuillage_callback(handles);
    
    // Affichage du texte "Traitement en Cours..." en rouge
    texte_traitement = uicontrol(   "Style", "text", ...
        "String", "Traitement en Cours ...", ...
        "ForegroundColor", [1, 0, 0], ...
        "FontSize", 28, ...
        "Background", [108/255, 146/255, 204/255] , ...
        "FontAngle" , "italic" , ...
        "Position", [430, 600, 300, 30]); 

    
    x = imread(chemin_complet);
    [l, c] = size(x);

    // Seuillage
    y = x;
    seuil = valeur_seuil;
    for i = 1:l
        for j = 1:c
            if x(i, j) > seuil then
                y(i, j) = 0;
            else
                y(i, j) = 255;
            end
        end
    end

    //Suppression du texte apres le traitement
    delete(texte_traitement);
    
    //Affichage des images d'origine et seuil
    subplot(1, 1, 1);
    axes_properties = gca();
    axes_properties.axes_bounds = [-0.040, 0.173, 0.51, 0.60];
    imshow(x);
    
    subplot(2, 2, 2);
    axes_properties = gca();
    axes_properties.axes_bounds = [0.530, 0.173, 0.51, 0.60];
    title(sprintf("Image après Seuil de %d", valeur_seuil), 'FontSize', 5, 'Color', 'white','font_style',8);
    imshow(y);
    
    img_sortie =y; 
    fn_bout_enregistrer(f, 0.7,  0.23, 0.17, 0.05 , 'Enregistrer',26); 
endfunction




//-------------------------------------------------------------------------------//
//---------- !!! FOCNTION QUI DEMARRE LES TRAITEMENT DES IMAGES -----------------//
//--------- (donc pas les menus et les background) ------------------------------//
//----------------------   !!! DU MENU 2  !!! -----------------------------------//
//-------------------------------------------------------------------------------//


// Fonction pour lancer la fonction ' Addition Image 'du Menu du meme nom

function btn_lancer_addition_callback(handles)
    global chemin_complet;
    global chemin_complet2;
    global poids_img1;
    global img_sortie;
    //Chargement des deux images
    img1 = imread(chemin_complet);
    img2 = imread(chemin_complet2);

    //Redimensionnement des images pour qu'elles aient la même taille
    size_img1 = size(img1);
    size_img2 = size(img2);

   img2 = imresize(img2, size_img1(1:2));  //On redimensionne img2 a la taille de img1
        
    //Verification des images et conversion en niveaux de gris si nécessaire
    //Si 2 sont couleur on converti pas et on addition , si l'une des deux l'est pas on met en couleur les canaux et on aditinne sinon adition simple
    if size(img1, 3) == 3 && size(img2, 3) == 3 then
        img_addition = min(max(img1 + img2, 0), 255); 
    
    elseif size(img1, 3) == 3 && size(img2, 3) == 1 then
        img2 = repmat(img2, [1, 1, 3]);  
        img_addition = min(max(img1 + img2, 0), 255); 

    elseif size(img1, 3) == 1 && size(img2, 3) == 3 then
        img1 = repmat(img1, [1, 1, 3]);  
        img_addition = min(max(img1 + img2, 0), 255); 
    
    else
        img_addition = min(max(img1 + img2, 0), 255); 
    end

    //On convertit le resultat en type image
    img_addition = uint8(img_addition);  

    //Affichage des images et de l'image addtionner
    subplot(2, 2, 1);
    axes_properties = gca();
    axes_properties.axes_bounds =  [0.018, 0.120, 0.395, 0.38];
    imshow(img1);
    title("Image Choisi 1", 'color','white','fontsize',4, 'font_style',8);


    subplot(2, 2, 3);
    axes_properties = gca();
    axes_properties.axes_bounds =  [0.018, 0.496, 0.395, 0.38];
    imshow(img2);
    title("Image Choisi 2", 'color','white','fontsize',4, 'font_style',8);
    

    subplot(2, 2, 2);
    axes_properties = gca();
    axes_properties.axes_bounds = [0.487, 0.172, 0.51, 0.60];
    imshow(img_addition);
    title("Addition dImages", 'color','white','fontsize',4, 'font_style',8);
    
    img_sortie =img_addition;
    fn_bout_enregistrer(f, 0.65,  0.23, 0.17, 0.05 , 'Enregistrer',26);  
endfunction


//-------------------------------------------------------------------------------//

// Fonction pour lancer la fonction ' Soustraction Image 'du Menu du meme nom

function btn_lancer_soustraction_callback(handles)
    global chemin_complet;
    global chemin_complet2;
    global img_sortie;
    
   
    //Chargement des deux images
    img1 = imread(chemin_complet);
    img2 = imread(chemin_complet2);
    
    //On redimensionne img2 a la taille de img1
    size_img1 = size(img1);
    img2 = imresize(img2, size_img1(1:2));

    //On converti en niveaux de gris si necessaire
    if size(img1, 3) == 3 then
        img1 = rgb2gray(img1);
    end
    if size(img2, 3) == 3 then
        img2 = rgb2gray(img2);
    end

    //soustraction mais avec limitation a 0 pour empecher les artefacts
    img_soustraction = max(img1 - img2, 0);

    //Converti en uint8 pour avoir une image correcte
    img_soustraction = uint8(img_soustraction);

    //On affichage les images d'origine et les image resultat
    subplot(2, 2, 1);
    axes_properties = gca();
    axes_properties.axes_bounds =  [0.018, 0.120, 0.395, 0.38];
    imshow(img1);
    title("Image Choisi 1", 'color','white','fontsize',4, 'font_style',8);


    subplot(2, 2, 3);
    axes_properties = gca();
    axes_properties.axes_bounds =  [0.018, 0.496, 0.395, 0.38]; 
    imshow(img2);
    title("Image A Soustraire", 'color','white','fontsize',4, 'font_style',8); 

    subplot(2, 2, 2);
    axes_properties = gca();
    axes_properties.axes_bounds = [0.487, 0.172, 0.51, 0.60];
    imshow(img_soustraction);
    title("Soustraction dImages", 'color','white','fontsize',4, 'font_style',8);
    
    img_sortie =img_soustraction
    fn_bout_enregistrer(f, 0.65,  0.23, 0.17, 0.05 , 'Enregistrer',26);  
endfunction



//-------------------------------------------------------------------------------//

// Fonction pour lancer la fonction ' Rotation Image 'du Menu du meme nom

function btn_lancer_rotation_callback(handles)
    global chemin_complet;
    global valeur_rotation;
    global img_sortie;

 
    texte_traitement = uicontrol(   "Style", "text", ...
        "String", "Traitement en Cours ...", ...
        "ForegroundColor", [1, 0, 0], ...
        "FontSize", 28, ...
        "Background", [108/255, 146/255, 204/255] , ...
        "FontAngle" , "italic" , ...
        "Position", [430, 600, 300, 30]); 
            
    img = imread(chemin_complet);

    if size(img, 3) == 3
        img = rgb2gray(img); //convertion en gris
    end

 
    angle_rad = valeur_rotation * %pi / 180; //transformation en radian

    [hauteur, largeur] = size(img);

    //Calcul nouvelles dimensions après rotation
    nouvelle_hauteur = round(abs(hauteur * cos(angle_rad)) + abs(largeur * sin(angle_rad)));
    nouvelle_largeur = round(abs(largeur * cos(angle_rad)) + abs(hauteur * sin(angle_rad)));

  
    img_rotation = zeros(nouvelle_hauteur, nouvelle_largeur);

    centre_x = largeur / 2;
    centre_y = hauteur / 2;
    nouv_centre_x = nouvelle_largeur / 2;
    nouv_centre_y = nouvelle_hauteur / 2;

    for x = 1:nouvelle_largeur
        for y = 1:nouvelle_hauteur
  
            x_origine = (x - nouv_centre_x) * cos(angle_rad) + (y - nouv_centre_y) * sin(angle_rad) + centre_x;
            y_origine = -(x - nouv_centre_x) * sin(angle_rad) + (y - nouv_centre_y) * cos(angle_rad) + centre_y;

            //Si les x et y d'origine sont dans les limites de l'image
            if x_origine >= 1 && x_origine <= largeur && y_origine >= 1 && y_origine <= hauteur
                img_rotation(y, x) = img(round(y_origine), round(x_origine));
            end
        end
    end

    img_rotation = uint8(img_rotation);

    delete(texte_traitement);
    subplot(1, 1, 1);
    axes_properties = gca();
    axes_properties.axes_bounds = [-0.040, 0.173, 0.51, 0.60];
    imshow(img);
    title("Image dorigine", 'FontSize', 5, 'Color', 'white');

    subplot(2, 2, 2);
    axes_properties = gca();
    axes_properties.axes_bounds = [0.530, 0.173, 0.51, 0.60];
    imshow(img_rotation);
    title(sprintf("Image Après Rotation de %d degrees", valeur_rotation), 'FontSize', 5, 'Color', 'white');
    
    img_sortie =img_rotation;
    fn_bout_enregistrer(f, 0.7,  0.23, 0.17, 0.05 , 'Enregistrer',26);
end


//-------------------------------------------------------------------------------//

// Fonction pour lancer la fonction ' inverser Image 'du Menu du meme nom

function btn_lancer_inverserCouleur_callback(handles)
    global chemin_complet;
    global img_sortie;

    img = imread(chemin_complet);
    
    if size(img, 3) == 3
        img_inversee = 255 - img; 
    else
        img_inversee = 255 - img; 
    end

    subplot(1, 1, 1);
    axes_properties = gca();
    axes_properties.axes_bounds = [-0.040, 0.173, 0.51, 0.60];
    imshow(img);
    
    subplot(2, 2, 2);
    axes_properties = gca();
    axes_properties.axes_bounds = [0.530, 0.173, 0.51, 0.60];
    imshow(img_inversee);
    title("Image avec couleurs inversées", 'FontSize', 5, 'Color', 'white','font_style',8);
    
    img_sortie =img_inversee; 
    fn_bout_enregistrer(f, 0.7,  0.23, 0.17, 0.05 , 'Enregistrer',26); 
endfunction




//-------------------------------------------------------------------------------//

// Fonction pour lancer la fonction ' symetrie Image 'du Menu du meme nom

function btn_lancer_symetrie_callback(handles)
    global chemin_complet img_sortie symetrie_choisie menu_deroul_symetrie ;
    
    //On reccupere l'option de symétrie choisie par l'utilisateur
    res_symetrie_choisie = get(menu_deroul_symetrie, 'Value');
     
    img = imread(chemin_complet);
    
    btn_symetrie_callback(handles);
    

    //On fait la symétrie selon le choix (1: horizontal, 2: vertical)
    if res_symetrie_choisie == 2 then
       [lignes, colonnes, canaux] = size(img);  
       img_symetrie = zeros(lignes, colonnes, canaux, "uint8");
    
        for i = 1:lignes
            for j = 1:colonnes
                img_symetrie(i, j, :) = img(lignes - i + 1, j, :);  
            end
        end
        titre_symetrie = "Image avec symétrie horizontale";
        
    elseif res_symetrie_choisie == 3 then
        [lignes, colonnes, canaux] = size(img);  
        img_symetrie = zeros(lignes, colonnes, canaux, "uint8");  
    
        for i = 1:lignes
            for j = 1:colonnes
                img_symetrie(i, j, :) = img(i, colonnes - j + 1, :); 
            end
        end
        titre_symetrie = "Image avec symétrie verticale";
    else
        disp("Veuillez sélectionner une symétrie.");
        return;
    end

    // Affichage
    subplot(1, 2, 1);
    axes_properties = gca();
    axes_properties.auto_clear = 'on'
    axes_properties.axes_bounds = [-0.040, 0.173, 0.51, 0.60];
    imshow(img);
    title("Image originale",'FontSize', 5, 'Color', 'white');

    subplot(1, 2, 2);
    axes_properties = gca();
    axes_properties.auto_clear = 'on'
    axes_properties.axes_bounds = [0.530, 0.173, 0.51, 0.60];
    imshow(img_symetrie);
    title(titre_symetrie,'FontSize', 5, 'Color', 'white');

    img_sortie = img_symetrie;
    fn_bout_enregistrer(f, 0.7,  0.23, 0.17, 0.05 , 'Enregistrer',26); 
endfunction








//-------------------------------------------------------------------------------//
//---------- !!! FOCNTION QUI DEMARRE LES TRAITEMENT DES IMAGES -----------------//
//--------- (donc pas les menus et les background) ------------------------------//
//----------------------   !!! DU MENU 3  !!! -----------------------------------//
//-------------------------------------------------------------------------------//



//-------------------------------------------------------------------------------//

// Fonction pour lancer la fonction ' Passe Haut  'du Menu du meme nom

function btn_lancer_filtre_passe_haut_callback(handles)
    global chemin_complet img_sortie filtre_passe_haut_choisie menu_deroul_filtre_passe_haut;

    img = imread(chemin_complet);
    //On reccupere l'option de filtre choisie par l'utilisateur
    filtre_passe_haut_choisie = get(menu_deroul_filtre_passe_haut, 'Value');
    
    btn_filtre_passe_haut_callback(handles);
    
    if size(img, 3) == 3
        img = rgb2gray(img);
    end
   
    //Les filtres
    laplacien_4 = [0 1 0; 1 -4 1; 0 1 0];
    laplacien_8 = [1 1 1; 1 -8 1; 1 1 1];
    sobel_h = [-1 -2 -1; 0 0 0; 1 2 1];
    sobel_v = [-1 0 1; -2 0 2; -1 0 1];

    img_filtree = zeros(size(img));
    // filtre en fonction du choix de l'utilisateur
    if filtre_passe_haut_choisie == 2
        // filtre Laplacien-4
        img_filtree = filter2(img, laplacien_4);
        titre_filtre = "Laplacien-4";
        
    elseif filtre_passe_haut_choisie == 3
        //filtre Laplacien-8
        img_filtree = filter2(img, laplacien_8);
        titre_filtre = "Laplacien-8";
        
    elseif filtre_passe_haut_choisie == 4
        //filtre Sobel Vertical
        img_filtree = filter2(img, sobel_v);
        titre_filtre = "Sobel Vertical";
        
    elseif filtre_passe_haut_choisie == 5
        //filtre Sobel Horizontal
        img_filtree = filter2(img, sobel_h);
        titre_filtre = "Sobel Horizontal";
        
    elseif filtre_passe_haut_choisie == 6
        // module du gradient de Sobel
        sobel_v_res = filter2(img, sobel_v);
        sobel_h_res = filter2(img, sobel_h);
        img_filtree = uint8(sqrt(sobel_v_res.^2 + sobel_h_res.^2));
        titre_filtre = "Module du gradient de Sobel";
        
    else
        messagebox("Veuillez sélectionner un filtre passe-haut", "Warning", "warning", "modal");
       return;
    end

  
    //Affichage
    subplot(1, 2, 1);
    axes_properties = gca();
    axes_properties.auto_clear = 'on';
    axes_properties.axes_bounds = [-0.040, 0.173, 0.51, 0.60];
    imshow(img);
    title("Image originale", 'FontSize', 5, 'Color', 'white');

    subplot(1, 2, 2);
    axes_properties = gca(); 
    axes_properties.auto_clear = 'on';
    axes_properties.axes_bounds = [0.530, 0.173, 0.51, 0.60];
    imshow(img_filtree);
    title(titre_filtre, 'FontSize', 5, 'Color', 'white');

    img_sortie = img_filtree;
    fn_bout_enregistrer(f, 0.7, 0.23, 0.17, 0.05, 'Enregistrer', 26);
endfunction



//-------------------------------------------------------------------------------//

// Fonction pour lancer la fonction ' Passe BAS  'du Menu du meme nom

function btn_lancer_filtre_passe_bas_callback(handles)
    global chemin_complet img_sortie filtre_passe_bas_choisie menu_deroul_filtre_passe_bas;

    img = imread(chemin_complet);

    [ligne, colonne, canaux] = size(img);
    if canaux == 3 then
        img = rgb2gray(img);
    end

    img_double = double(img);

    filtre_passe_bas_choisie = get(menu_deroul_filtre_passe_bas, 'Value');

    img_filtree_bruit = img;
    
    btn_filtre_passe_bas_callback(handles);
    
    texte_traitement = uicontrol(   "Style", "text", ...
        "String", "Traitement en Cours ...", ...
        "ForegroundColor", [1, 0, 0], ...
        "FontSize", 28, ...
        "Background", [108/255, 146/255, 204/255] , ...
        "FontAngle" , "italic" , ...
        "Position", [430, 600, 300, 30]); 
        
    
    k = [];
    titre_resultat = "";

    //traitement en fonction du choix
    select filtre_passe_bas_choisie
    case 1
        messagebox("Veuillez sélectionner un filtre ou bruit a appliquer", "Warning", "warning", "modal");
        delete (texte_traitement);
        return;

    case 2 //Bruit Gaussian
        img_filtree_bruit = imnoise(img, 'gaussian');
        titre_resultat = "Bruit Gaussien";

    case 3 //Bruit Salt & Pepper
        img_filtree_bruit = imnoise(img, 'salt & pepper');
        titre_resultat = "Bruit Sel & Poivre";

    case 4 //Filtre Moyenneur (3x3)
        k = ones(3, 3) / 9; //liste  moyenneur
        img_filtree_bruit = conv2(img_double, k, 'same'); 
        titre_resultat = "Filtre Moyenneur (3x3)";

    case 5 //Filtre Médian
        [m, n] = size(img);
        img_temp = zeros(m, n);
        for i = 2:m-1
            for j = 2:n-1
                voisinage = [img(i-1,j-1), img(i-1,j), img(i-1,j+1),
                             img(i,j-1), img(i,j), img(i,j+1),
                             img(i+1,j-1), img(i+1,j), img(i+1,j+1)];
                img_temp(i, j) = median(voisinage);
            end
        end
        img_filtree_bruit = uint8(img_temp);
        titre_resultat = "Filtre Médian";

    case 6 //Filtre Gaussien 
        k = [1/16 2/16 1/16; 2/16 4/16 2/16; 1/16 2/16 1/16];
        img_filtree_bruit = conv2(img_double, k, 'same'); 
        titre_resultat = "Filtre Gaussien (3x3)";

    else
        messagebox("Veuillez sélectionner un filtre ou bruit a appliquer", "Warning", "warning", "modal");
        delete (texte_traitement);
        return;
    end

    delete (texte_traitement);

    img_filtree_bruit = uint8(max(min(img_filtree_bruit, 255), 0));
    // Afficher 
    subplot(1,2,2);
    axes_properties = gca();
    axes_properties.auto_clear = 'on';
    axes_properties.axes_bounds = [-0.040, 0.173, 0.51, 0.60];
    imshow(img); 
    title("Image d Origine", 'FontSize', 5, 'Color', 'white');
    
    subplot(1, 2, 2); 
    axes_properties = gca(); 
    axes_properties.auto_clear = 'on';
    axes_properties.axes_bounds = [0.530, 0.173, 0.51, 0.60];
    imshow(img_filtree_bruit); 
    title(titre_resultat, 'FontSize', 5, 'Color', 'white');

    img_sortie = img_filtree_bruit;
    fn_bout_enregistrer(f, 0.7, 0.23, 0.17, 0.05, 'Enregistrer', 26);
endfunction


